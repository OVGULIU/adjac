!! NOTE: this file is autogenerated from adjac.f95.in: do not edit manually
! -*-f90-*-
!
! adjac: Automatic Differentiation for generating Jacobians.
!

! Copyright (c) 2014, Pauli Virtanen <pav@iki.fi>
! All rights reserved.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions
! are met:
!
! 1. Redistributions of source code must retain the above copyright
! notice, this list of conditions and the following disclaimer.
!
! 2. Redistributions in binary form must reproduce the above copyright
! notice, this list of conditions and the following disclaimer in the
! documentation and/or other materials provided with the distribution.
!
! 3. Neither the name of the copyright holder nor the names of its
! contributors may be used to endorse or promote products derived from
! this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
! "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
! LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
! FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
! COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
! INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
! BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
! LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
! CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
! LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
! ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
! POSSIBILITY OF SUCH DAMAGE.

module adjac
  private

  ! NOTE: we would like to use derived type finalizers for memory
  ! deallocation.  However, as of 2015-03-12, these are not fully
  ! implemented in gfortran, and will not be called e.g. on function
  ! returns that the code here extensively relies on.

  type, public :: adjac_double
     double precision :: value, vmul
     integer :: i = 0
  end type adjac_double

  type, public :: adjac_complexan
     double complex :: value, vmul
     integer :: i = 0
  end type adjac_complexan

  type, public :: adjac_complex
     type(adjac_double) :: re, im
  end type adjac_complex

  logical :: jac_product_mode = .false.
  ! Differential binary tree
  !
  ! if (sum_map(1 + 2*(i-1)) .ne. 0) then
  !     D[i] = sum_mul(1+2*(i-1)) * D[sum_map(1+2*(i-1))] + sum_mul(2+2*(i-1)) * D[sum_map(2+2*(i-1))]
  ! else
  !     D[i] = D[i]
  !
  integer, parameter :: block_size = 4
  integer :: free_a = 1, free_q = 1
  integer, dimension(:), allocatable :: sum_map_a, sum_map_q
  double precision, dimension(:), allocatable :: sum_mul_a
  double complex, dimension(:), allocatable :: sum_mul_q

  public assignment(=)
  interface assignment(=)
     module procedure assign_ai, assign_ad
     module procedure assign_bi, assign_bd, assign_bz, assign_ba
     module procedure assign_qi, assign_qd, assign_qz
     module procedure assign_ai_1, assign_ad_1
     module procedure assign_bi_1, assign_bd_1, assign_bz_1, assign_ba_1
     module procedure assign_qi_1, assign_qd_1, assign_qz_1

     module procedure assign_ai_10, assign_ad_10
     module procedure assign_bi_10, assign_bd_10, assign_bz_10, assign_ba_10
     module procedure assign_qi_10, assign_qd_10, assign_qz_10

     module procedure assign_ai_2, assign_ad_2
     module procedure assign_bi_2, assign_bd_2, assign_bz_2, assign_ba_2
     module procedure assign_qi_2, assign_qd_2, assign_qz_2

     module procedure assign_ai_20, assign_ad_20
     module procedure assign_bi_20, assign_bd_20, assign_bz_20, assign_ba_20
     module procedure assign_qi_20, assign_qd_20, assign_qz_20

     module procedure assign_ai_3, assign_ad_3
     module procedure assign_bi_3, assign_bd_3, assign_bz_3, assign_ba_3
     module procedure assign_qi_3, assign_qd_3, assign_qz_3

     module procedure assign_ai_30, assign_ad_30
     module procedure assign_bi_30, assign_bd_30, assign_bz_30, assign_ba_30
     module procedure assign_qi_30, assign_qd_30, assign_qz_30

     module procedure assign_ai_4, assign_ad_4
     module procedure assign_bi_4, assign_bd_4, assign_bz_4, assign_ba_4
     module procedure assign_qi_4, assign_qd_4, assign_qz_4

     module procedure assign_ai_40, assign_ad_40
     module procedure assign_bi_40, assign_bd_40, assign_bz_40, assign_ba_40
     module procedure assign_qi_40, assign_qd_40, assign_qz_40
  end interface

  public operator(+)
  interface operator(+)
     module procedure add_aa
     module procedure add_bb
     module procedure add_qq
     module procedure add_ab
     module procedure add_ba
     module procedure add_ai
     module procedure add_bi
     module procedure add_qi
     module procedure add_ia
     module procedure add_ib
     module procedure add_iq
     module procedure add_ad
     module procedure add_bd
     module procedure add_qd
     module procedure add_da
     module procedure add_db
     module procedure add_dq
     module procedure add_az
     module procedure add_bz
     module procedure add_qz
     module procedure add_za
     module procedure add_zb
     module procedure add_zq
     module procedure add_aa_1
     module procedure add_bb_1
     module procedure add_qq_1
     module procedure add_ab_1
     module procedure add_ba_1
     module procedure add_ai_1
     module procedure add_bi_1
     module procedure add_qi_1
     module procedure add_ia_1
     module procedure add_ib_1
     module procedure add_iq_1
     module procedure add_ad_1
     module procedure add_bd_1
     module procedure add_qd_1
     module procedure add_da_1
     module procedure add_db_1
     module procedure add_dq_1
     module procedure add_az_1
     module procedure add_bz_1
     module procedure add_qz_1
     module procedure add_za_1
     module procedure add_zb_1
     module procedure add_zq_1
     module procedure add_aa_01
     module procedure add_bb_01
     module procedure add_qq_01
     module procedure add_ab_01
     module procedure add_ba_01
     module procedure add_ai_01
     module procedure add_bi_01
     module procedure add_qi_01
     module procedure add_ia_01
     module procedure add_ib_01
     module procedure add_iq_01
     module procedure add_ad_01
     module procedure add_bd_01
     module procedure add_qd_01
     module procedure add_da_01
     module procedure add_db_01
     module procedure add_dq_01
     module procedure add_az_01
     module procedure add_bz_01
     module procedure add_qz_01
     module procedure add_za_01
     module procedure add_zb_01
     module procedure add_zq_01
     module procedure add_aa_10
     module procedure add_bb_10
     module procedure add_qq_10
     module procedure add_ab_10
     module procedure add_ba_10
     module procedure add_ai_10
     module procedure add_bi_10
     module procedure add_qi_10
     module procedure add_ia_10
     module procedure add_ib_10
     module procedure add_iq_10
     module procedure add_ad_10
     module procedure add_bd_10
     module procedure add_qd_10
     module procedure add_da_10
     module procedure add_db_10
     module procedure add_dq_10
     module procedure add_az_10
     module procedure add_bz_10
     module procedure add_qz_10
     module procedure add_za_10
     module procedure add_zb_10
     module procedure add_zq_10
     module procedure add_aa_2
     module procedure add_bb_2
     module procedure add_qq_2
     module procedure add_ab_2
     module procedure add_ba_2
     module procedure add_ai_2
     module procedure add_bi_2
     module procedure add_qi_2
     module procedure add_ia_2
     module procedure add_ib_2
     module procedure add_iq_2
     module procedure add_ad_2
     module procedure add_bd_2
     module procedure add_qd_2
     module procedure add_da_2
     module procedure add_db_2
     module procedure add_dq_2
     module procedure add_az_2
     module procedure add_bz_2
     module procedure add_qz_2
     module procedure add_za_2
     module procedure add_zb_2
     module procedure add_zq_2
     module procedure add_aa_02
     module procedure add_bb_02
     module procedure add_qq_02
     module procedure add_ab_02
     module procedure add_ba_02
     module procedure add_ai_02
     module procedure add_bi_02
     module procedure add_qi_02
     module procedure add_ia_02
     module procedure add_ib_02
     module procedure add_iq_02
     module procedure add_ad_02
     module procedure add_bd_02
     module procedure add_qd_02
     module procedure add_da_02
     module procedure add_db_02
     module procedure add_dq_02
     module procedure add_az_02
     module procedure add_bz_02
     module procedure add_qz_02
     module procedure add_za_02
     module procedure add_zb_02
     module procedure add_zq_02
     module procedure add_aa_20
     module procedure add_bb_20
     module procedure add_qq_20
     module procedure add_ab_20
     module procedure add_ba_20
     module procedure add_ai_20
     module procedure add_bi_20
     module procedure add_qi_20
     module procedure add_ia_20
     module procedure add_ib_20
     module procedure add_iq_20
     module procedure add_ad_20
     module procedure add_bd_20
     module procedure add_qd_20
     module procedure add_da_20
     module procedure add_db_20
     module procedure add_dq_20
     module procedure add_az_20
     module procedure add_bz_20
     module procedure add_qz_20
     module procedure add_za_20
     module procedure add_zb_20
     module procedure add_zq_20
     module procedure add_aa_3
     module procedure add_bb_3
     module procedure add_qq_3
     module procedure add_ab_3
     module procedure add_ba_3
     module procedure add_ai_3
     module procedure add_bi_3
     module procedure add_qi_3
     module procedure add_ia_3
     module procedure add_ib_3
     module procedure add_iq_3
     module procedure add_ad_3
     module procedure add_bd_3
     module procedure add_qd_3
     module procedure add_da_3
     module procedure add_db_3
     module procedure add_dq_3
     module procedure add_az_3
     module procedure add_bz_3
     module procedure add_qz_3
     module procedure add_za_3
     module procedure add_zb_3
     module procedure add_zq_3
     module procedure add_aa_03
     module procedure add_bb_03
     module procedure add_qq_03
     module procedure add_ab_03
     module procedure add_ba_03
     module procedure add_ai_03
     module procedure add_bi_03
     module procedure add_qi_03
     module procedure add_ia_03
     module procedure add_ib_03
     module procedure add_iq_03
     module procedure add_ad_03
     module procedure add_bd_03
     module procedure add_qd_03
     module procedure add_da_03
     module procedure add_db_03
     module procedure add_dq_03
     module procedure add_az_03
     module procedure add_bz_03
     module procedure add_qz_03
     module procedure add_za_03
     module procedure add_zb_03
     module procedure add_zq_03
     module procedure add_aa_30
     module procedure add_bb_30
     module procedure add_qq_30
     module procedure add_ab_30
     module procedure add_ba_30
     module procedure add_ai_30
     module procedure add_bi_30
     module procedure add_qi_30
     module procedure add_ia_30
     module procedure add_ib_30
     module procedure add_iq_30
     module procedure add_ad_30
     module procedure add_bd_30
     module procedure add_qd_30
     module procedure add_da_30
     module procedure add_db_30
     module procedure add_dq_30
     module procedure add_az_30
     module procedure add_bz_30
     module procedure add_qz_30
     module procedure add_za_30
     module procedure add_zb_30
     module procedure add_zq_30
     module procedure add_aa_4
     module procedure add_bb_4
     module procedure add_qq_4
     module procedure add_ab_4
     module procedure add_ba_4
     module procedure add_ai_4
     module procedure add_bi_4
     module procedure add_qi_4
     module procedure add_ia_4
     module procedure add_ib_4
     module procedure add_iq_4
     module procedure add_ad_4
     module procedure add_bd_4
     module procedure add_qd_4
     module procedure add_da_4
     module procedure add_db_4
     module procedure add_dq_4
     module procedure add_az_4
     module procedure add_bz_4
     module procedure add_qz_4
     module procedure add_za_4
     module procedure add_zb_4
     module procedure add_zq_4
     module procedure add_aa_04
     module procedure add_bb_04
     module procedure add_qq_04
     module procedure add_ab_04
     module procedure add_ba_04
     module procedure add_ai_04
     module procedure add_bi_04
     module procedure add_qi_04
     module procedure add_ia_04
     module procedure add_ib_04
     module procedure add_iq_04
     module procedure add_ad_04
     module procedure add_bd_04
     module procedure add_qd_04
     module procedure add_da_04
     module procedure add_db_04
     module procedure add_dq_04
     module procedure add_az_04
     module procedure add_bz_04
     module procedure add_qz_04
     module procedure add_za_04
     module procedure add_zb_04
     module procedure add_zq_04
     module procedure add_aa_40
     module procedure add_bb_40
     module procedure add_qq_40
     module procedure add_ab_40
     module procedure add_ba_40
     module procedure add_ai_40
     module procedure add_bi_40
     module procedure add_qi_40
     module procedure add_ia_40
     module procedure add_ib_40
     module procedure add_iq_40
     module procedure add_ad_40
     module procedure add_bd_40
     module procedure add_qd_40
     module procedure add_da_40
     module procedure add_db_40
     module procedure add_dq_40
     module procedure add_az_40
     module procedure add_bz_40
     module procedure add_qz_40
     module procedure add_za_40
     module procedure add_zb_40
     module procedure add_zq_40
     module procedure pos_a, pos_b, pos_q
     module procedure pos_a_1, pos_b_1, pos_q_1
     module procedure pos_a_2, pos_b_2, pos_q_2
     module procedure pos_a_3, pos_b_3, pos_q_3
     module procedure pos_a_4, pos_b_4, pos_q_4
  end interface

  public operator(-)
  interface operator(-)
     module procedure sub_aa
     module procedure sub_bb
     module procedure sub_qq
     module procedure sub_ab
     module procedure sub_ba
     module procedure sub_ai
     module procedure sub_bi
     module procedure sub_qi
     module procedure sub_ia
     module procedure sub_ib
     module procedure sub_iq
     module procedure sub_ad
     module procedure sub_bd
     module procedure sub_qd
     module procedure sub_da
     module procedure sub_db
     module procedure sub_dq
     module procedure sub_az
     module procedure sub_bz
     module procedure sub_qz
     module procedure sub_za
     module procedure sub_zb
     module procedure sub_zq
     module procedure sub_aa_1
     module procedure sub_bb_1
     module procedure sub_qq_1
     module procedure sub_ab_1
     module procedure sub_ba_1
     module procedure sub_ai_1
     module procedure sub_bi_1
     module procedure sub_qi_1
     module procedure sub_ia_1
     module procedure sub_ib_1
     module procedure sub_iq_1
     module procedure sub_ad_1
     module procedure sub_bd_1
     module procedure sub_qd_1
     module procedure sub_da_1
     module procedure sub_db_1
     module procedure sub_dq_1
     module procedure sub_az_1
     module procedure sub_bz_1
     module procedure sub_qz_1
     module procedure sub_za_1
     module procedure sub_zb_1
     module procedure sub_zq_1
     module procedure sub_aa_01
     module procedure sub_bb_01
     module procedure sub_qq_01
     module procedure sub_ab_01
     module procedure sub_ba_01
     module procedure sub_ai_01
     module procedure sub_bi_01
     module procedure sub_qi_01
     module procedure sub_ia_01
     module procedure sub_ib_01
     module procedure sub_iq_01
     module procedure sub_ad_01
     module procedure sub_bd_01
     module procedure sub_qd_01
     module procedure sub_da_01
     module procedure sub_db_01
     module procedure sub_dq_01
     module procedure sub_az_01
     module procedure sub_bz_01
     module procedure sub_qz_01
     module procedure sub_za_01
     module procedure sub_zb_01
     module procedure sub_zq_01
     module procedure sub_aa_10
     module procedure sub_bb_10
     module procedure sub_qq_10
     module procedure sub_ab_10
     module procedure sub_ba_10
     module procedure sub_ai_10
     module procedure sub_bi_10
     module procedure sub_qi_10
     module procedure sub_ia_10
     module procedure sub_ib_10
     module procedure sub_iq_10
     module procedure sub_ad_10
     module procedure sub_bd_10
     module procedure sub_qd_10
     module procedure sub_da_10
     module procedure sub_db_10
     module procedure sub_dq_10
     module procedure sub_az_10
     module procedure sub_bz_10
     module procedure sub_qz_10
     module procedure sub_za_10
     module procedure sub_zb_10
     module procedure sub_zq_10
     module procedure sub_aa_2
     module procedure sub_bb_2
     module procedure sub_qq_2
     module procedure sub_ab_2
     module procedure sub_ba_2
     module procedure sub_ai_2
     module procedure sub_bi_2
     module procedure sub_qi_2
     module procedure sub_ia_2
     module procedure sub_ib_2
     module procedure sub_iq_2
     module procedure sub_ad_2
     module procedure sub_bd_2
     module procedure sub_qd_2
     module procedure sub_da_2
     module procedure sub_db_2
     module procedure sub_dq_2
     module procedure sub_az_2
     module procedure sub_bz_2
     module procedure sub_qz_2
     module procedure sub_za_2
     module procedure sub_zb_2
     module procedure sub_zq_2
     module procedure sub_aa_02
     module procedure sub_bb_02
     module procedure sub_qq_02
     module procedure sub_ab_02
     module procedure sub_ba_02
     module procedure sub_ai_02
     module procedure sub_bi_02
     module procedure sub_qi_02
     module procedure sub_ia_02
     module procedure sub_ib_02
     module procedure sub_iq_02
     module procedure sub_ad_02
     module procedure sub_bd_02
     module procedure sub_qd_02
     module procedure sub_da_02
     module procedure sub_db_02
     module procedure sub_dq_02
     module procedure sub_az_02
     module procedure sub_bz_02
     module procedure sub_qz_02
     module procedure sub_za_02
     module procedure sub_zb_02
     module procedure sub_zq_02
     module procedure sub_aa_20
     module procedure sub_bb_20
     module procedure sub_qq_20
     module procedure sub_ab_20
     module procedure sub_ba_20
     module procedure sub_ai_20
     module procedure sub_bi_20
     module procedure sub_qi_20
     module procedure sub_ia_20
     module procedure sub_ib_20
     module procedure sub_iq_20
     module procedure sub_ad_20
     module procedure sub_bd_20
     module procedure sub_qd_20
     module procedure sub_da_20
     module procedure sub_db_20
     module procedure sub_dq_20
     module procedure sub_az_20
     module procedure sub_bz_20
     module procedure sub_qz_20
     module procedure sub_za_20
     module procedure sub_zb_20
     module procedure sub_zq_20
     module procedure sub_aa_3
     module procedure sub_bb_3
     module procedure sub_qq_3
     module procedure sub_ab_3
     module procedure sub_ba_3
     module procedure sub_ai_3
     module procedure sub_bi_3
     module procedure sub_qi_3
     module procedure sub_ia_3
     module procedure sub_ib_3
     module procedure sub_iq_3
     module procedure sub_ad_3
     module procedure sub_bd_3
     module procedure sub_qd_3
     module procedure sub_da_3
     module procedure sub_db_3
     module procedure sub_dq_3
     module procedure sub_az_3
     module procedure sub_bz_3
     module procedure sub_qz_3
     module procedure sub_za_3
     module procedure sub_zb_3
     module procedure sub_zq_3
     module procedure sub_aa_03
     module procedure sub_bb_03
     module procedure sub_qq_03
     module procedure sub_ab_03
     module procedure sub_ba_03
     module procedure sub_ai_03
     module procedure sub_bi_03
     module procedure sub_qi_03
     module procedure sub_ia_03
     module procedure sub_ib_03
     module procedure sub_iq_03
     module procedure sub_ad_03
     module procedure sub_bd_03
     module procedure sub_qd_03
     module procedure sub_da_03
     module procedure sub_db_03
     module procedure sub_dq_03
     module procedure sub_az_03
     module procedure sub_bz_03
     module procedure sub_qz_03
     module procedure sub_za_03
     module procedure sub_zb_03
     module procedure sub_zq_03
     module procedure sub_aa_30
     module procedure sub_bb_30
     module procedure sub_qq_30
     module procedure sub_ab_30
     module procedure sub_ba_30
     module procedure sub_ai_30
     module procedure sub_bi_30
     module procedure sub_qi_30
     module procedure sub_ia_30
     module procedure sub_ib_30
     module procedure sub_iq_30
     module procedure sub_ad_30
     module procedure sub_bd_30
     module procedure sub_qd_30
     module procedure sub_da_30
     module procedure sub_db_30
     module procedure sub_dq_30
     module procedure sub_az_30
     module procedure sub_bz_30
     module procedure sub_qz_30
     module procedure sub_za_30
     module procedure sub_zb_30
     module procedure sub_zq_30
     module procedure sub_aa_4
     module procedure sub_bb_4
     module procedure sub_qq_4
     module procedure sub_ab_4
     module procedure sub_ba_4
     module procedure sub_ai_4
     module procedure sub_bi_4
     module procedure sub_qi_4
     module procedure sub_ia_4
     module procedure sub_ib_4
     module procedure sub_iq_4
     module procedure sub_ad_4
     module procedure sub_bd_4
     module procedure sub_qd_4
     module procedure sub_da_4
     module procedure sub_db_4
     module procedure sub_dq_4
     module procedure sub_az_4
     module procedure sub_bz_4
     module procedure sub_qz_4
     module procedure sub_za_4
     module procedure sub_zb_4
     module procedure sub_zq_4
     module procedure sub_aa_04
     module procedure sub_bb_04
     module procedure sub_qq_04
     module procedure sub_ab_04
     module procedure sub_ba_04
     module procedure sub_ai_04
     module procedure sub_bi_04
     module procedure sub_qi_04
     module procedure sub_ia_04
     module procedure sub_ib_04
     module procedure sub_iq_04
     module procedure sub_ad_04
     module procedure sub_bd_04
     module procedure sub_qd_04
     module procedure sub_da_04
     module procedure sub_db_04
     module procedure sub_dq_04
     module procedure sub_az_04
     module procedure sub_bz_04
     module procedure sub_qz_04
     module procedure sub_za_04
     module procedure sub_zb_04
     module procedure sub_zq_04
     module procedure sub_aa_40
     module procedure sub_bb_40
     module procedure sub_qq_40
     module procedure sub_ab_40
     module procedure sub_ba_40
     module procedure sub_ai_40
     module procedure sub_bi_40
     module procedure sub_qi_40
     module procedure sub_ia_40
     module procedure sub_ib_40
     module procedure sub_iq_40
     module procedure sub_ad_40
     module procedure sub_bd_40
     module procedure sub_qd_40
     module procedure sub_da_40
     module procedure sub_db_40
     module procedure sub_dq_40
     module procedure sub_az_40
     module procedure sub_bz_40
     module procedure sub_qz_40
     module procedure sub_za_40
     module procedure sub_zb_40
     module procedure sub_zq_40
     module procedure neg_a, neg_b, neg_q
     module procedure neg_a_1, neg_b_1, neg_q_1
     module procedure neg_a_2, neg_b_2, neg_q_2
     module procedure neg_a_3, neg_b_3, neg_q_3
     module procedure neg_a_4, neg_b_4, neg_q_4
  end interface

  public operator(*)
  interface operator(*)
     module procedure mul_aa
     module procedure mul_bb
     module procedure mul_qq
     module procedure mul_ab
     module procedure mul_ba
     module procedure mul_ai
     module procedure mul_bi
     module procedure mul_qi
     module procedure mul_ia
     module procedure mul_ib
     module procedure mul_iq
     module procedure mul_ad
     module procedure mul_bd
     module procedure mul_qd
     module procedure mul_da
     module procedure mul_db
     module procedure mul_dq
     module procedure mul_az
     module procedure mul_bz
     module procedure mul_qz
     module procedure mul_za
     module procedure mul_zb
     module procedure mul_zq
     module procedure mul_aa_1
     module procedure mul_bb_1
     module procedure mul_qq_1
     module procedure mul_ab_1
     module procedure mul_ba_1
     module procedure mul_ai_1
     module procedure mul_bi_1
     module procedure mul_qi_1
     module procedure mul_ia_1
     module procedure mul_ib_1
     module procedure mul_iq_1
     module procedure mul_ad_1
     module procedure mul_bd_1
     module procedure mul_qd_1
     module procedure mul_da_1
     module procedure mul_db_1
     module procedure mul_dq_1
     module procedure mul_az_1
     module procedure mul_bz_1
     module procedure mul_qz_1
     module procedure mul_za_1
     module procedure mul_zb_1
     module procedure mul_zq_1
     module procedure mul_aa_01
     module procedure mul_bb_01
     module procedure mul_qq_01
     module procedure mul_ab_01
     module procedure mul_ba_01
     module procedure mul_ai_01
     module procedure mul_bi_01
     module procedure mul_qi_01
     module procedure mul_ia_01
     module procedure mul_ib_01
     module procedure mul_iq_01
     module procedure mul_ad_01
     module procedure mul_bd_01
     module procedure mul_qd_01
     module procedure mul_da_01
     module procedure mul_db_01
     module procedure mul_dq_01
     module procedure mul_az_01
     module procedure mul_bz_01
     module procedure mul_qz_01
     module procedure mul_za_01
     module procedure mul_zb_01
     module procedure mul_zq_01
     module procedure mul_aa_10
     module procedure mul_bb_10
     module procedure mul_qq_10
     module procedure mul_ab_10
     module procedure mul_ba_10
     module procedure mul_ai_10
     module procedure mul_bi_10
     module procedure mul_qi_10
     module procedure mul_ia_10
     module procedure mul_ib_10
     module procedure mul_iq_10
     module procedure mul_ad_10
     module procedure mul_bd_10
     module procedure mul_qd_10
     module procedure mul_da_10
     module procedure mul_db_10
     module procedure mul_dq_10
     module procedure mul_az_10
     module procedure mul_bz_10
     module procedure mul_qz_10
     module procedure mul_za_10
     module procedure mul_zb_10
     module procedure mul_zq_10
     module procedure mul_aa_2
     module procedure mul_bb_2
     module procedure mul_qq_2
     module procedure mul_ab_2
     module procedure mul_ba_2
     module procedure mul_ai_2
     module procedure mul_bi_2
     module procedure mul_qi_2
     module procedure mul_ia_2
     module procedure mul_ib_2
     module procedure mul_iq_2
     module procedure mul_ad_2
     module procedure mul_bd_2
     module procedure mul_qd_2
     module procedure mul_da_2
     module procedure mul_db_2
     module procedure mul_dq_2
     module procedure mul_az_2
     module procedure mul_bz_2
     module procedure mul_qz_2
     module procedure mul_za_2
     module procedure mul_zb_2
     module procedure mul_zq_2
     module procedure mul_aa_02
     module procedure mul_bb_02
     module procedure mul_qq_02
     module procedure mul_ab_02
     module procedure mul_ba_02
     module procedure mul_ai_02
     module procedure mul_bi_02
     module procedure mul_qi_02
     module procedure mul_ia_02
     module procedure mul_ib_02
     module procedure mul_iq_02
     module procedure mul_ad_02
     module procedure mul_bd_02
     module procedure mul_qd_02
     module procedure mul_da_02
     module procedure mul_db_02
     module procedure mul_dq_02
     module procedure mul_az_02
     module procedure mul_bz_02
     module procedure mul_qz_02
     module procedure mul_za_02
     module procedure mul_zb_02
     module procedure mul_zq_02
     module procedure mul_aa_20
     module procedure mul_bb_20
     module procedure mul_qq_20
     module procedure mul_ab_20
     module procedure mul_ba_20
     module procedure mul_ai_20
     module procedure mul_bi_20
     module procedure mul_qi_20
     module procedure mul_ia_20
     module procedure mul_ib_20
     module procedure mul_iq_20
     module procedure mul_ad_20
     module procedure mul_bd_20
     module procedure mul_qd_20
     module procedure mul_da_20
     module procedure mul_db_20
     module procedure mul_dq_20
     module procedure mul_az_20
     module procedure mul_bz_20
     module procedure mul_qz_20
     module procedure mul_za_20
     module procedure mul_zb_20
     module procedure mul_zq_20
     module procedure mul_aa_3
     module procedure mul_bb_3
     module procedure mul_qq_3
     module procedure mul_ab_3
     module procedure mul_ba_3
     module procedure mul_ai_3
     module procedure mul_bi_3
     module procedure mul_qi_3
     module procedure mul_ia_3
     module procedure mul_ib_3
     module procedure mul_iq_3
     module procedure mul_ad_3
     module procedure mul_bd_3
     module procedure mul_qd_3
     module procedure mul_da_3
     module procedure mul_db_3
     module procedure mul_dq_3
     module procedure mul_az_3
     module procedure mul_bz_3
     module procedure mul_qz_3
     module procedure mul_za_3
     module procedure mul_zb_3
     module procedure mul_zq_3
     module procedure mul_aa_03
     module procedure mul_bb_03
     module procedure mul_qq_03
     module procedure mul_ab_03
     module procedure mul_ba_03
     module procedure mul_ai_03
     module procedure mul_bi_03
     module procedure mul_qi_03
     module procedure mul_ia_03
     module procedure mul_ib_03
     module procedure mul_iq_03
     module procedure mul_ad_03
     module procedure mul_bd_03
     module procedure mul_qd_03
     module procedure mul_da_03
     module procedure mul_db_03
     module procedure mul_dq_03
     module procedure mul_az_03
     module procedure mul_bz_03
     module procedure mul_qz_03
     module procedure mul_za_03
     module procedure mul_zb_03
     module procedure mul_zq_03
     module procedure mul_aa_30
     module procedure mul_bb_30
     module procedure mul_qq_30
     module procedure mul_ab_30
     module procedure mul_ba_30
     module procedure mul_ai_30
     module procedure mul_bi_30
     module procedure mul_qi_30
     module procedure mul_ia_30
     module procedure mul_ib_30
     module procedure mul_iq_30
     module procedure mul_ad_30
     module procedure mul_bd_30
     module procedure mul_qd_30
     module procedure mul_da_30
     module procedure mul_db_30
     module procedure mul_dq_30
     module procedure mul_az_30
     module procedure mul_bz_30
     module procedure mul_qz_30
     module procedure mul_za_30
     module procedure mul_zb_30
     module procedure mul_zq_30
     module procedure mul_aa_4
     module procedure mul_bb_4
     module procedure mul_qq_4
     module procedure mul_ab_4
     module procedure mul_ba_4
     module procedure mul_ai_4
     module procedure mul_bi_4
     module procedure mul_qi_4
     module procedure mul_ia_4
     module procedure mul_ib_4
     module procedure mul_iq_4
     module procedure mul_ad_4
     module procedure mul_bd_4
     module procedure mul_qd_4
     module procedure mul_da_4
     module procedure mul_db_4
     module procedure mul_dq_4
     module procedure mul_az_4
     module procedure mul_bz_4
     module procedure mul_qz_4
     module procedure mul_za_4
     module procedure mul_zb_4
     module procedure mul_zq_4
     module procedure mul_aa_04
     module procedure mul_bb_04
     module procedure mul_qq_04
     module procedure mul_ab_04
     module procedure mul_ba_04
     module procedure mul_ai_04
     module procedure mul_bi_04
     module procedure mul_qi_04
     module procedure mul_ia_04
     module procedure mul_ib_04
     module procedure mul_iq_04
     module procedure mul_ad_04
     module procedure mul_bd_04
     module procedure mul_qd_04
     module procedure mul_da_04
     module procedure mul_db_04
     module procedure mul_dq_04
     module procedure mul_az_04
     module procedure mul_bz_04
     module procedure mul_qz_04
     module procedure mul_za_04
     module procedure mul_zb_04
     module procedure mul_zq_04
     module procedure mul_aa_40
     module procedure mul_bb_40
     module procedure mul_qq_40
     module procedure mul_ab_40
     module procedure mul_ba_40
     module procedure mul_ai_40
     module procedure mul_bi_40
     module procedure mul_qi_40
     module procedure mul_ia_40
     module procedure mul_ib_40
     module procedure mul_iq_40
     module procedure mul_ad_40
     module procedure mul_bd_40
     module procedure mul_qd_40
     module procedure mul_da_40
     module procedure mul_db_40
     module procedure mul_dq_40
     module procedure mul_az_40
     module procedure mul_bz_40
     module procedure mul_qz_40
     module procedure mul_za_40
     module procedure mul_zb_40
     module procedure mul_zq_40
  end interface operator(*)

  public operator(/)
  interface operator(/)
     module procedure div_aa
     module procedure div_bb
     module procedure div_qq
     module procedure div_ab
     module procedure div_ba
     module procedure div_ai
     module procedure div_bi
     module procedure div_qi
     module procedure div_ia
     module procedure div_ib
     module procedure div_iq
     module procedure div_ad
     module procedure div_bd
     module procedure div_qd
     module procedure div_da
     module procedure div_db
     module procedure div_dq
     module procedure div_az
     module procedure div_bz
     module procedure div_qz
     module procedure div_za
     module procedure div_zb
     module procedure div_zq
     module procedure div_aa_1
     module procedure div_bb_1
     module procedure div_qq_1
     module procedure div_ab_1
     module procedure div_ba_1
     module procedure div_ai_1
     module procedure div_bi_1
     module procedure div_qi_1
     module procedure div_ia_1
     module procedure div_ib_1
     module procedure div_iq_1
     module procedure div_ad_1
     module procedure div_bd_1
     module procedure div_qd_1
     module procedure div_da_1
     module procedure div_db_1
     module procedure div_dq_1
     module procedure div_az_1
     module procedure div_bz_1
     module procedure div_qz_1
     module procedure div_za_1
     module procedure div_zb_1
     module procedure div_zq_1
     module procedure div_aa_01
     module procedure div_bb_01
     module procedure div_qq_01
     module procedure div_ab_01
     module procedure div_ba_01
     module procedure div_ai_01
     module procedure div_bi_01
     module procedure div_qi_01
     module procedure div_ia_01
     module procedure div_ib_01
     module procedure div_iq_01
     module procedure div_ad_01
     module procedure div_bd_01
     module procedure div_qd_01
     module procedure div_da_01
     module procedure div_db_01
     module procedure div_dq_01
     module procedure div_az_01
     module procedure div_bz_01
     module procedure div_qz_01
     module procedure div_za_01
     module procedure div_zb_01
     module procedure div_zq_01
     module procedure div_aa_10
     module procedure div_bb_10
     module procedure div_qq_10
     module procedure div_ab_10
     module procedure div_ba_10
     module procedure div_ai_10
     module procedure div_bi_10
     module procedure div_qi_10
     module procedure div_ia_10
     module procedure div_ib_10
     module procedure div_iq_10
     module procedure div_ad_10
     module procedure div_bd_10
     module procedure div_qd_10
     module procedure div_da_10
     module procedure div_db_10
     module procedure div_dq_10
     module procedure div_az_10
     module procedure div_bz_10
     module procedure div_qz_10
     module procedure div_za_10
     module procedure div_zb_10
     module procedure div_zq_10
     module procedure div_aa_2
     module procedure div_bb_2
     module procedure div_qq_2
     module procedure div_ab_2
     module procedure div_ba_2
     module procedure div_ai_2
     module procedure div_bi_2
     module procedure div_qi_2
     module procedure div_ia_2
     module procedure div_ib_2
     module procedure div_iq_2
     module procedure div_ad_2
     module procedure div_bd_2
     module procedure div_qd_2
     module procedure div_da_2
     module procedure div_db_2
     module procedure div_dq_2
     module procedure div_az_2
     module procedure div_bz_2
     module procedure div_qz_2
     module procedure div_za_2
     module procedure div_zb_2
     module procedure div_zq_2
     module procedure div_aa_02
     module procedure div_bb_02
     module procedure div_qq_02
     module procedure div_ab_02
     module procedure div_ba_02
     module procedure div_ai_02
     module procedure div_bi_02
     module procedure div_qi_02
     module procedure div_ia_02
     module procedure div_ib_02
     module procedure div_iq_02
     module procedure div_ad_02
     module procedure div_bd_02
     module procedure div_qd_02
     module procedure div_da_02
     module procedure div_db_02
     module procedure div_dq_02
     module procedure div_az_02
     module procedure div_bz_02
     module procedure div_qz_02
     module procedure div_za_02
     module procedure div_zb_02
     module procedure div_zq_02
     module procedure div_aa_20
     module procedure div_bb_20
     module procedure div_qq_20
     module procedure div_ab_20
     module procedure div_ba_20
     module procedure div_ai_20
     module procedure div_bi_20
     module procedure div_qi_20
     module procedure div_ia_20
     module procedure div_ib_20
     module procedure div_iq_20
     module procedure div_ad_20
     module procedure div_bd_20
     module procedure div_qd_20
     module procedure div_da_20
     module procedure div_db_20
     module procedure div_dq_20
     module procedure div_az_20
     module procedure div_bz_20
     module procedure div_qz_20
     module procedure div_za_20
     module procedure div_zb_20
     module procedure div_zq_20
     module procedure div_aa_3
     module procedure div_bb_3
     module procedure div_qq_3
     module procedure div_ab_3
     module procedure div_ba_3
     module procedure div_ai_3
     module procedure div_bi_3
     module procedure div_qi_3
     module procedure div_ia_3
     module procedure div_ib_3
     module procedure div_iq_3
     module procedure div_ad_3
     module procedure div_bd_3
     module procedure div_qd_3
     module procedure div_da_3
     module procedure div_db_3
     module procedure div_dq_3
     module procedure div_az_3
     module procedure div_bz_3
     module procedure div_qz_3
     module procedure div_za_3
     module procedure div_zb_3
     module procedure div_zq_3
     module procedure div_aa_03
     module procedure div_bb_03
     module procedure div_qq_03
     module procedure div_ab_03
     module procedure div_ba_03
     module procedure div_ai_03
     module procedure div_bi_03
     module procedure div_qi_03
     module procedure div_ia_03
     module procedure div_ib_03
     module procedure div_iq_03
     module procedure div_ad_03
     module procedure div_bd_03
     module procedure div_qd_03
     module procedure div_da_03
     module procedure div_db_03
     module procedure div_dq_03
     module procedure div_az_03
     module procedure div_bz_03
     module procedure div_qz_03
     module procedure div_za_03
     module procedure div_zb_03
     module procedure div_zq_03
     module procedure div_aa_30
     module procedure div_bb_30
     module procedure div_qq_30
     module procedure div_ab_30
     module procedure div_ba_30
     module procedure div_ai_30
     module procedure div_bi_30
     module procedure div_qi_30
     module procedure div_ia_30
     module procedure div_ib_30
     module procedure div_iq_30
     module procedure div_ad_30
     module procedure div_bd_30
     module procedure div_qd_30
     module procedure div_da_30
     module procedure div_db_30
     module procedure div_dq_30
     module procedure div_az_30
     module procedure div_bz_30
     module procedure div_qz_30
     module procedure div_za_30
     module procedure div_zb_30
     module procedure div_zq_30
     module procedure div_aa_4
     module procedure div_bb_4
     module procedure div_qq_4
     module procedure div_ab_4
     module procedure div_ba_4
     module procedure div_ai_4
     module procedure div_bi_4
     module procedure div_qi_4
     module procedure div_ia_4
     module procedure div_ib_4
     module procedure div_iq_4
     module procedure div_ad_4
     module procedure div_bd_4
     module procedure div_qd_4
     module procedure div_da_4
     module procedure div_db_4
     module procedure div_dq_4
     module procedure div_az_4
     module procedure div_bz_4
     module procedure div_qz_4
     module procedure div_za_4
     module procedure div_zb_4
     module procedure div_zq_4
     module procedure div_aa_04
     module procedure div_bb_04
     module procedure div_qq_04
     module procedure div_ab_04
     module procedure div_ba_04
     module procedure div_ai_04
     module procedure div_bi_04
     module procedure div_qi_04
     module procedure div_ia_04
     module procedure div_ib_04
     module procedure div_iq_04
     module procedure div_ad_04
     module procedure div_bd_04
     module procedure div_qd_04
     module procedure div_da_04
     module procedure div_db_04
     module procedure div_dq_04
     module procedure div_az_04
     module procedure div_bz_04
     module procedure div_qz_04
     module procedure div_za_04
     module procedure div_zb_04
     module procedure div_zq_04
     module procedure div_aa_40
     module procedure div_bb_40
     module procedure div_qq_40
     module procedure div_ab_40
     module procedure div_ba_40
     module procedure div_ai_40
     module procedure div_bi_40
     module procedure div_qi_40
     module procedure div_ia_40
     module procedure div_ib_40
     module procedure div_iq_40
     module procedure div_ad_40
     module procedure div_bd_40
     module procedure div_qd_40
     module procedure div_da_40
     module procedure div_db_40
     module procedure div_dq_40
     module procedure div_az_40
     module procedure div_bz_40
     module procedure div_qz_40
     module procedure div_za_40
     module procedure div_zb_40
     module procedure div_zq_40
  end interface operator(/)

  public operator(**)
  interface operator(**)
     module procedure pow_ai, pow_ad, pow_qi, pow_qd, pow_qz
     module procedure pow_ai_1, pow_ad_1, pow_qi_1, pow_qd_1, pow_qz_1
     module procedure pow_ai_2, pow_ad_2, pow_qi_2, pow_qd_2, pow_qz_2
     module procedure pow_ai_3, pow_ad_3, pow_qi_3, pow_qd_3, pow_qz_3
     module procedure pow_ai_4, pow_ad_4, pow_qi_4, pow_qd_4, pow_qz_4

     module procedure pow_ai_10, pow_ad_10, pow_qi_10, pow_qd_10, pow_qz_10
     module procedure pow_ai_20, pow_ad_20, pow_qi_20, pow_qd_20, pow_qz_20
     module procedure pow_ai_30, pow_ad_30, pow_qi_30, pow_qd_30, pow_qz_30
     module procedure pow_ai_40, pow_ad_40, pow_qi_40, pow_qd_40, pow_qz_40

     module procedure pow_ai_01, pow_ad_01, pow_qi_01, pow_qd_01, pow_qz_01
     module procedure pow_ai_02, pow_ad_02, pow_qi_02, pow_qd_02, pow_qz_02
     module procedure pow_ai_03, pow_ad_03, pow_qi_03, pow_qd_03, pow_qz_03
     module procedure pow_ai_04, pow_ad_04, pow_qi_04, pow_qd_04, pow_qz_04
  end interface operator(**)

  public matmul
  interface matmul
     module procedure matmul_aa, matmul_ai, matmul_ia, matmul_ad, matmul_da
     module procedure matmul_bb, matmul_bz, matmul_zb
     module procedure matmul_qq, matmul_qi, matmul_iq, matmul_qd, matmul_dq, matmul_qz, matmul_zq
  end interface matmul

  public dble
  interface dble
     module procedure dble_a, dble_b
     module procedure dble_a_1, dble_b_1
     module procedure dble_a_2, dble_b_2
     module procedure dble_a_3, dble_b_3
     module procedure dble_a_4, dble_b_4
  end interface dble

  public aimag
  interface aimag
     module procedure aimag_b
     module procedure aimag_b_1
     module procedure aimag_b_2
     module procedure aimag_b_3
     module procedure aimag_b_4
  end interface aimag

  public conjg
  interface conjg
     module procedure conjg_b
     module procedure conjg_b_1
     module procedure conjg_b_2
     module procedure conjg_b_3
     module procedure conjg_b_4
  end interface conjg

  public exp
  interface exp
     module procedure exp_a, exp_b, exp_q
     module procedure exp_a_1, exp_b_1, exp_q_1
     module procedure exp_a_2, exp_b_2, exp_q_2
     module procedure exp_a_3, exp_b_3, exp_q_3
     module procedure exp_a_4, exp_b_4, exp_q_4
  end interface exp

  public sin
  interface sin
     module procedure sin_a, sin_b, sin_q
     module procedure sin_a_1, sin_b_1, sin_q_1
     module procedure sin_a_2, sin_b_2, sin_q_2
     module procedure sin_a_3, sin_b_3, sin_q_3
     module procedure sin_a_4, sin_b_4, sin_q_4
  end interface sin

  public cos
  interface cos
     module procedure cos_a, cos_b, cos_q
     module procedure cos_a_1, cos_b_1, cos_q_1
     module procedure cos_a_2, cos_b_2, cos_q_2
     module procedure cos_a_3, cos_b_3, cos_q_3
     module procedure cos_a_4, cos_b_4, cos_q_4
  end interface cos

  public log
  interface log
     module procedure log_a, log_b, log_q
     module procedure log_a_1, log_b_1, log_q_1
     module procedure log_a_2, log_b_2, log_q_2
     module procedure log_a_3, log_b_3, log_q_3
     module procedure log_a_4, log_b_4, log_q_4
  end interface log

  interface adjac_set_independent
     module procedure set_independent_a, set_independent_q
     module procedure set_independent_many_a, set_independent_many_q
  end interface adjac_set_independent

  interface sum_taylor
     module procedure sum_taylor_a, sum_taylor_q
  end interface sum_taylor

  interface adjac_get_value
     module procedure get_value_one_a, get_value_one_q
     module procedure get_value_many_a, get_value_many_q
  end interface adjac_get_value

  interface adjac_get_dense_jacobian
     module procedure get_dense_jacobian_a, get_dense_jacobian_q
  end interface adjac_get_dense_jacobian

  interface adjac_get_coo_jacobian
     module procedure get_coo_jacobian_a, get_coo_jacobian_q
  end interface adjac_get_coo_jacobian

  public adjac_set_independent, adjac_get_value, &
       adjac_get_dense_jacobian, adjac_get_coo_jacobian, &
       adjac_reset, adjac_free

contains

  subroutine fatal_error(msg)
    implicit none
    character(len=*), intent(in) :: msg
    write(*,*) 'adjac: error: ', trim(msg)
    stop
  end subroutine fatal_error

  subroutine adjac_reset(product_mode)
    implicit none
    logical, optional, intent(in) :: product_mode

    if (present(product_mode)) then
       jac_product_mode = product_mode
    end if
    free_a = 1
    free_q = 1
  end subroutine adjac_reset

  subroutine adjac_free()
    implicit none
    free_a = 1
    free_q = 1
    if (allocated(sum_map_a)) then
       deallocate(sum_map_a)
       deallocate(sum_mul_a)
    end if
    if (allocated(sum_map_q)) then
       deallocate(sum_map_q)
       deallocate(sum_mul_q)
    end if
  end subroutine adjac_free
  subroutine heap_siftup(heap, nheap, initpos)
    implicit none
    integer, intent(in) :: nheap
    integer, dimension(*), intent(inout) :: heap
    integer, intent(in) :: initpos

    integer :: pos, item, pos2, pos3

    pos = initpos
    pos2 = 2*pos

    item = heap(pos)
    do while (pos2 <= nheap)
       pos3 = pos2 + 1
       if (pos3 <= nheap .and. heap(pos3) >= heap(pos2)) then
          pos2 = pos3
       end if
       heap(pos) = heap(pos2)
       pos = pos2
       pos2 = 2*pos
    end do
    heap(pos) = item
    call heap_siftdown(heap, nheap, initpos, pos)
  end subroutine heap_siftup

  subroutine heap_siftdown(heap, nheap, initpos, pos0)
    implicit none
    integer, intent(in) :: nheap
    integer, dimension(*), intent(inout) :: heap
    integer, intent(in) :: initpos, pos0

    integer :: item, pos, pos2

    pos = pos0
    item = heap(pos)
    do while (pos > initpos)
       pos2 = pos/2
       if (heap(pos2) < item) then
          heap(pos) = heap(pos2)
       else
          exit
       end if
       pos = pos2
    end do
    heap(pos) = item
  end subroutine heap_siftdown

  subroutine heap_push(heap, nheap, item)
    implicit none
    integer, intent(inout) :: nheap
    integer, dimension(*), intent(inout) :: heap
    integer, intent(in) :: item

    integer :: parent, pos, tmp

    nheap = nheap + 1
    heap(nheap) = item
    call heap_siftdown(heap, nheap, 1, nheap)
  end subroutine heap_push

  subroutine heap_pop(heap, nheap, item)
    implicit none
    integer, intent(inout) :: nheap
    integer, dimension(*), intent(inout) :: heap
    integer, intent(out) :: item

    integer :: pos, pos2, pos3, toswap, newitem, parent

    if (nheap <= 0) then
       call fatal_error('empty heap')
    end if

    item = heap(1)
    heap(1) = heap(nheap)
    nheap = nheap - 1

    if (nheap.gt.1) then
       call heap_siftup(heap, nheap, 1)
    end if
  end subroutine heap_pop

  subroutine heap_pushpop(heap, nheap, item, item_out)
    implicit none
    integer, intent(inout) :: nheap
    integer, dimension(*), intent(inout) :: heap
    integer, intent(in) :: item
    integer, intent(out) :: item_out

    integer :: parent, pos, tmp

    if (nheap > 0 .and. item < heap(1)) then
       item_out = heap(1)
       heap(1) = item
       if (nheap.gt.1) then
          call heap_siftup(heap, nheap, 1)
       end if
    else
       item_out = item
    end if
  end subroutine heap_pushpop
   subroutine alloc_mem_a(x)
    implicit none
    type(adjac_double), intent(inout) :: x

    integer, dimension(:), allocatable :: itmp
    double precision, dimension(:), allocatable :: tmp
    integer :: sz

    if (jac_product_mode) then
       return
    end if
    if (.not.allocated(sum_map_a)) then
       sz = 0
    else
       sz = size(sum_map_a)
    end if

    if (sz < 2*free_a + 1) then
       ! Enlarge work space
       if (allocated(sum_map_a)) then
          sz = sz + 2*free_a + 1
          allocate(itmp(sz), tmp(sz))
          itmp(1:size(sum_map_a)) = sum_map_a(:)
          tmp(1:size(sum_mul_a)) = sum_mul_a(:)
          call move_alloc(itmp, sum_map_a)
          call move_alloc(tmp, sum_mul_a)
       else
          allocate(sum_map_a(100), sum_mul_a(100))
       end if
    end if

    x%i = free_a
    free_a = free_a + 1
  end subroutine alloc_mem_a

   subroutine link_mem_a(dst, src)
    implicit none
    type(adjac_double), intent(inout) :: dst
    type(adjac_double), intent(in) :: src
    dst%i = src%i
  end subroutine link_mem_a

   subroutine free_mem_a(x)
    implicit none
    type(adjac_double), intent(inout) :: x
    x%i = 0
  end subroutine free_mem_a

  subroutine set_independent_a(x, xval, j, dx)
    implicit none
    type(adjac_double), intent(out) :: x
    double precision, intent(in) :: xval
    double precision, optional, intent(in) :: dx
    integer, intent(in) :: j

    x%value = xval
    if (jac_product_mode) then
       if (.not.present(dx)) then
          call fatal_error('no dx given to adjac_set_independent when jacobian product mode is active')
       end if
       x%vmul = dx
    else
       x%vmul = 1
       call alloc_mem_a(x)
       sum_map_a(1 + 2*(x%i-1)) = 0
       sum_map_a(2 + 2*(x%i-1)) = j
    end if
  end subroutine set_independent_a

  subroutine set_independent_many_a(x, xval, dx)
    implicit none
    type(adjac_double), dimension(:), intent(inout) :: x
    double precision, dimension(size(x)), intent(in) :: xval
    double precision, dimension(size(x)), optional, intent(in) :: dx

    integer :: j

    if (present(dx)) then
       do j = 1, size(x,1)
          call set_independent_a(x(j), xval(j), j, dx(j))
       end do
    else
       do j = 1, size(x,1)
          call set_independent_a(x(j), xval(j), j)
       end do
    end if
  end subroutine set_independent_many_a

  subroutine get_value_one_a(y, val, dy)
    implicit none
    type(adjac_double), intent(in) :: y
    double precision, intent(out) :: val
    double precision, optional, intent(out) :: dy
    val = y%value
    if (present(dy)) then
       if (.not. jac_product_mode) then
          call fatal_error('call to adjac_get_value with dy when jacobian product mode is not active')
       end if
       dy = y%vmul
    end if
  end subroutine get_value_one_a

  subroutine get_value_many_a(y, val, dy)
    implicit none
    type(adjac_double), dimension(:), intent(in) :: y
    double precision, dimension(size(y,1)), intent(out) :: val
    double precision, dimension(size(y,1)), optional, intent(out) :: dy
    integer :: j
    do j = 1, size(val,1)
       val(j) = y(j)%value
    end do
    if (present(dy)) then
       if (.not. jac_product_mode) then
          call fatal_error('call to adjac_get_value with dy when jacobian product mode is not active')
       end if
       do j = 1, size(val,1)
          dy(j) = y(j)%vmul
       end do
    end if
  end subroutine get_value_many_a

  subroutine get_dense_jacobian_a(y, jac_dense)
    implicit none
    type(adjac_double), dimension(:), intent(inout) :: y
    double precision, dimension(:,:), intent(out) :: jac_dense
    double precision, dimension(block_size,free_a) :: work
    integer, dimension(free_a) :: iwork, imask
    integer :: k, j, ia, ib, kmin, kmax, nwork, j_next
    double precision :: v

    if (jac_product_mode) then
       call fatal_error('call to adjac_get_dense_jacobian when jacobian product mode is active')
    end if

    jac_dense = 0

    work = 0
    imask = 0

    do kmin = 1, size(y,1), block_size
       kmax = min(kmin + block_size - 1, size(y,1))

       nwork = 0
       do k = kmin, kmax
          work(k-kmin+1, y(k)%i) = y(k)%vmul
          call heap_push(iwork, nwork, y(k)%i)
          imask(y(k)%i) = 1
       end do

       
    ! Traverse the tape
    j_next = 0
    if (nwork > 0) then
       call heap_pop(iwork, nwork, j_next)
    end if
    do while (j_next > 0)
       j = j_next
       j_next = 0

       if (256*nwork > j) then
          ! Heap is too big, probably contains nearly all j values,
          ! and we are better off just looping through them
          nwork = j
          exit
       end if

       ia = sum_map_a(1+2*(j-1))
       ib = sum_map_a(2+2*(j-1))

       if (ia == 0) then
          jac_dense(kmin:kmax,ib) = work(1:(kmax-kmin+1),j)
       else
          
        work(:,ia) = work(:,ia) + sum_mul_a(1+2*(j-1)) * work(:,j)
        work(:,ib) = work(:,ib) + sum_mul_a(2+2*(j-1)) * work(:,j)
        
          if (imask(ia) == 0 .and. imask(ib) == 0) then
             call heap_push(iwork, nwork, ia)
             call heap_pushpop(iwork, nwork, ib, j_next)
             imask(ia) = 1
             imask(ib) = 1
          else if (imask(ia) == 0) then
             call heap_pushpop(iwork, nwork, ia, j_next)
             imask(ia) = 1
          else if (imask(ib) == 0) then
             call heap_pushpop(iwork, nwork, ib, j_next)
             imask(ib) = 1
          end if
       end if
       work(:,j) = 0
       imask(j) = 0

       if (nwork > 0 .and. j_next == 0) then
         call heap_pop(iwork, nwork, j_next)
       end if
    end do
    do j = nwork, 1, -1
      if (imask(j).ne.0) then
        ia = sum_map_a(1+2*(j-1))
        ib = sum_map_a(2+2*(j-1))
        if (ia == 0) then
          jac_dense(kmin:kmax,ib) = work(1:(kmax-kmin+1),j)
        else
          
        work(:,ia) = work(:,ia) + sum_mul_a(1+2*(j-1)) * work(:,j)
        work(:,ib) = work(:,ib) + sum_mul_a(2+2*(j-1)) * work(:,j)
        
          imask(ia) = 1
          imask(ib) = 1
        end if
        work(:,j) = 0
        imask(j) = 0
      end if
    end do

    end do
  end subroutine get_dense_jacobian_a

  subroutine get_coo_jacobian_a(y, jac_val, jac_i, jac_j)
    implicit none
    type(adjac_double), dimension(:), intent(inout) :: y
    double precision, dimension(:), allocatable, intent(inout) :: jac_val
    integer, dimension(:), allocatable, intent(inout) :: jac_i, jac_j
    double precision, dimension(block_size,free_a) :: work
    integer, dimension(free_a) :: iwork, imask
    integer, dimension(:), allocatable :: itmp
    double precision, dimension(:), allocatable :: vtmp
    integer :: kmin, kmax, k, j, ia, ib, nnz, nwork, j_next, sz
    double precision :: v

    if (jac_product_mode) then
       call fatal_error('call to adjac_get_coo_jacobian when jacobian product mode is active')
    end if

    if (allocated(jac_val)) deallocate(jac_val)
    if (allocated(jac_i)) deallocate(jac_i)
    if (allocated(jac_j)) deallocate(jac_j)

    sz = free_a + 10
    allocate(jac_val(sz), jac_i(sz), jac_j(sz))

    nnz = 0
    work = 0
    imask = 0

    do kmin = 1, size(y,1), block_size
       kmax = min(kmin + block_size - 1, size(y,1))

       nwork = 0
       do k = kmin, kmax
          work(k-kmin+1, y(k)%i) = y(k)%vmul
          call heap_push(iwork, nwork, y(k)%i)
          imask(y(k)%i) = 1
       end do

       
    ! Traverse the tape
    j_next = 0
    if (nwork > 0) then
       call heap_pop(iwork, nwork, j_next)
    end if
    do while (j_next > 0)
       j = j_next
       j_next = 0

       if (256*nwork > j) then
          ! Heap is too big, probably contains nearly all j values,
          ! and we are better off just looping through them
          nwork = j
          exit
       end if

       ia = sum_map_a(1+2*(j-1))
       ib = sum_map_a(2+2*(j-1))

       if (ia == 0) then
          
            do k = kmin, kmax
               if (work(k-kmin+1,j).ne.0) then
                   if (nnz >= sz) then
                      ! Exponential overallocation
                      sz = 2*sz + 1

                      allocate(itmp(sz))
                      itmp(1:nnz) = jac_i(1:nnz)
                      call move_alloc(itmp, jac_i)

                      allocate(itmp(sz))
                      itmp(1:nnz) = jac_j(1:nnz)
                      call move_alloc(itmp, jac_j)

                      allocate(vtmp(sz))
                      vtmp(1:nnz) = jac_val(1:nnz)
                      call move_alloc(vtmp, jac_val)
                   end if
                   nnz = nnz + 1
                   jac_i(nnz) = k
                   jac_j(nnz) = ib
                   jac_val(nnz) = work(k-kmin+1,j)
                end if
            end do
        
       else
          
        work(:,ia) = work(:,ia) + sum_mul_a(1+2*(j-1)) * work(:,j)
        work(:,ib) = work(:,ib) + sum_mul_a(2+2*(j-1)) * work(:,j)
        
          if (imask(ia) == 0 .and. imask(ib) == 0) then
             call heap_push(iwork, nwork, ia)
             call heap_pushpop(iwork, nwork, ib, j_next)
             imask(ia) = 1
             imask(ib) = 1
          else if (imask(ia) == 0) then
             call heap_pushpop(iwork, nwork, ia, j_next)
             imask(ia) = 1
          else if (imask(ib) == 0) then
             call heap_pushpop(iwork, nwork, ib, j_next)
             imask(ib) = 1
          end if
       end if
       work(:,j) = 0
       imask(j) = 0

       if (nwork > 0 .and. j_next == 0) then
         call heap_pop(iwork, nwork, j_next)
       end if
    end do
    do j = nwork, 1, -1
      if (imask(j).ne.0) then
        ia = sum_map_a(1+2*(j-1))
        ib = sum_map_a(2+2*(j-1))
        if (ia == 0) then
          
            do k = kmin, kmax
               if (work(k-kmin+1,j).ne.0) then
                   if (nnz >= sz) then
                      ! Exponential overallocation
                      sz = 2*sz + 1

                      allocate(itmp(sz))
                      itmp(1:nnz) = jac_i(1:nnz)
                      call move_alloc(itmp, jac_i)

                      allocate(itmp(sz))
                      itmp(1:nnz) = jac_j(1:nnz)
                      call move_alloc(itmp, jac_j)

                      allocate(vtmp(sz))
                      vtmp(1:nnz) = jac_val(1:nnz)
                      call move_alloc(vtmp, jac_val)
                   end if
                   nnz = nnz + 1
                   jac_i(nnz) = k
                   jac_j(nnz) = ib
                   jac_val(nnz) = work(k-kmin+1,j)
                end if
            end do
        
        else
          
        work(:,ia) = work(:,ia) + sum_mul_a(1+2*(j-1)) * work(:,j)
        work(:,ib) = work(:,ib) + sum_mul_a(2+2*(j-1)) * work(:,j)
        
          imask(ia) = 1
          imask(ib) = 1
        end if
        work(:,j) = 0
        imask(j) = 0
      end if
    end do

    end do

    if (nnz < sz) then
       ! Shrink to size
       allocate(itmp(nnz))
       itmp(1:nnz) = jac_i(1:nnz)
       call move_alloc(itmp, jac_i)
       allocate(itmp(nnz))
       itmp(1:nnz) = jac_j(1:nnz)
       call move_alloc(itmp, jac_j)
       allocate(vtmp(nnz))
       vtmp(1:nnz) = jac_val(1:nnz)
       call move_alloc(vtmp, jac_val)
    end if
  end subroutine get_coo_jacobian_a

   subroutine sum_taylor_a(alphap, betap, a, b, c)
    ! c := alpha*a + beta*b
    use iso_c_binding
    implicit none
    double precision, intent(in) :: alphap, betap
    type(adjac_double), intent(in) :: a, b
    type(adjac_double), intent(inout) :: c

    interface
        subroutine sparse_vector_sum_a(alpha, beta, na, nb, nc, ia, ib, ic, va, vb, vc) &
            bind(C,name="sparse_vector_sum_a")
         use iso_c_binding
         integer(kind=c_int), intent(in) :: na, nb, ia(*), ib(*)
         integer(kind=c_int), intent(inout) :: nc
         integer(kind=c_int), intent(out) :: ic(*)
         real(kind=c_double), intent(in) :: alpha, beta, va(*), vb(*)
         real(kind=c_double), intent(out) :: vc(*)
       end subroutine sparse_vector_sum_a
    end interface

    if (jac_product_mode) then
       c%vmul = alphap * a%vmul + betap * b%vmul
    else
       if (a%vmul == 0 .or. a%i == 0) then
          c%vmul = betap * b%vmul
          c%i = b%i
       else if (b%vmul == 0 .or. b%i == 0) then
          c%vmul = alphap * a%vmul
          c%i = a%i
       else if (a%i == b%i) then
          c%vmul = alphap * a%vmul + betap * b%vmul
          c%i = a%i
       else
          call alloc_mem_a(c)
          c%vmul = 1
          sum_map_a(1 + 2*(c%i-1)) = a%i
          sum_map_a(2 + 2*(c%i-1)) = b%i
          sum_mul_a(1 + 2*(c%i-1)) = alphap * a%vmul
          sum_mul_a(2 + 2*(c%i-1)) = betap * b%vmul
       end if
    end if
  end subroutine sum_taylor_a

  
  !--------------------------------------------------------------------------
  ! Overloaded operators
  !--------------------------------------------------------------------------

  !!
  !! assignment(=)
  !!

   subroutine assign_ai(x, y)
    implicit none
    type(adjac_double), intent(inout) :: x
    integer, intent(in) :: y
    call free_mem_a(x)
    x%value = y
    x%vmul = 0
  end subroutine assign_ai
   subroutine assign_ad(x, y)
    implicit none
    type(adjac_double), intent(inout) :: x
    double precision, intent(in) :: y
    call free_mem_a(x)
    x%value = y
    x%vmul = 0
  end subroutine assign_ad
   subroutine assign_bi(x, y)
    implicit none
    type(adjac_complex), intent(inout) :: x
    integer, intent(in) :: y
    x%re = dble(y)
    x%im = 0d0
  end subroutine assign_bi
   subroutine assign_bd(x, y)
    implicit none
    type(adjac_complex), intent(inout) :: x
    double precision, intent(in) :: y
    x%re = dble(y)
    x%im = 0d0
  end subroutine assign_bd

   subroutine assign_bz(x, y)
    implicit none
    type(adjac_complex), intent(inout) :: x
    double complex, intent(in) :: y
    x%re = dble(y)
    x%im = aimag(y)
  end subroutine assign_bz

   subroutine assign_ba(x, y)
    implicit none
    type(adjac_complex), intent(inout) :: x
    type(adjac_double), intent(in) :: y
    x%re = y
    x%im = 0d0
  end subroutine assign_ba

  !!
  !! operator(+)
  !!

  ! X + Y = x + y + (x_j + y_j) dj

   function add_aa(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x, y
    type(adjac_double) :: z

    z%value = x%value + y%value
    call sum_taylor(dble(1d0), dble(1d0), x, y, z)
  end function add_aa

   function add_ai(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_double) :: z
    z%value = x%value + y
    z%vmul = x%vmul
    call link_mem_a(z, x)
  end function add_ai

   function add_ia(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_double) :: z
    z = y + x
  end function add_ia
   function add_ad(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_double) :: z
    z%value = x%value + y
    z%vmul = x%vmul
    call link_mem_a(z, x)
  end function add_ad

   function add_da(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_double) :: z
    z = y + x
  end function add_da
   function add_az(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x + dble(y)
    z%im = aimag(y)
  end function add_az

   function add_za(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) + y
    z%im = aimag(x)
  end function add_za

   function add_bb(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re + y%re
    z%im = x%im + y%im
  end function add_bb

   function add_bz(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re + dble(y)
    z%im = x%im + aimag(y)
  end function add_bz

   function add_zb(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) + y%re
    z%im = aimag(x) + y%im
  end function add_zb

   function add_ba(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re + y
    z%im = x%im
  end function add_ba

   function add_ab(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x + y%re
    z%im = y%im
  end function add_ab

   function add_bi(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_complex) :: z
    z = x + dcmplx(y)
  end function add_bi

   function add_ib(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) + y
  end function add_ib
   function add_bd(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_complex) :: z
    z = x + dcmplx(y)
  end function add_bd

   function add_db(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) + y
  end function add_db

  !!
  !! operator(+), unary
  !!

   function pos_a(x) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_double) :: z
    z = x
  end function pos_a

   function pos_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    z = x
  end function pos_b

  !!
  !! operator(-)
  !!

  ! X - Y = x - y + (x_j - y_j) dj

   function sub_aa(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x, y
    type(adjac_double) :: z

    z%value = x%value - y%value
    call sum_taylor(dble(1d0), dble(-1d0), x, y, z)
  end function sub_aa

   function sub_ai(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_double) :: z
    z%value = x%value - y
    z%vmul = x%vmul
    call link_mem_a(z, x)
  end function sub_ai

   function sub_ia(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_double) :: z
    z%value = x - y%value
    z%vmul = -y%vmul
    call link_mem_a(z, y)
  end function sub_ia
   function sub_ad(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_double) :: z
    z%value = x%value - y
    z%vmul = x%vmul
    call link_mem_a(z, x)
  end function sub_ad

   function sub_da(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_double) :: z
    z%value = x - y%value
    z%vmul = -y%vmul
    call link_mem_a(z, y)
  end function sub_da
   function sub_az(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x - dble(y)
    z%im = -aimag(y)
  end function sub_az

   function sub_za(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) - y
    z%im = aimag(x)
  end function sub_za

   function sub_bb(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re - y%re
    z%im = x%im - y%im
  end function sub_bb

   function sub_bz(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re - dble(y)
    z%im = x%im - aimag(y)
  end function sub_bz

   function sub_zb(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) - y%re
    z%im = aimag(x) - y%im
  end function sub_zb

   function sub_ba(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re - y
    z%im = x%im
  end function sub_ba

   function sub_ab(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x - y%re
    z%im = -y%im
  end function sub_ab

   function sub_bi(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_complex) :: z
    z = x - dcmplx(y)
  end function sub_bi

   function sub_ib(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) - y
  end function sub_ib
   function sub_bd(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_complex) :: z
    z = x - dcmplx(y)
  end function sub_bd

   function sub_db(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) - y
  end function sub_db

  !!
  !! operator(-), unary
  !!

   function neg_a(x) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_double) :: z
    z = 0d0 - x
  end function neg_a

   function neg_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    z = (0d0,0d0) - x
  end function neg_b

  !!
  !! operator(*)
  !!

  ! X*Y = x*y + (x y_j + y x_j) dj

   function mul_aa(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x, y
    type(adjac_double) :: z

    z%value = x%value * y%value
    call sum_taylor(y%value, x%value, x, y, z)
  end function mul_aa

   function mul_ai(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_double) :: z
    if (y == 0) then
       z%value = 0
       z%vmul = 0
    else
       z%value = x%value * y
       z%vmul = x%vmul * y
       call link_mem_a(z, x)
    end if
  end function mul_ai

   function mul_ia(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_double) :: z
    z = y * x
  end function mul_ia
   function mul_ad(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_double) :: z
    if (y == 0) then
       z%value = 0
       z%vmul = 0
    else
       z%value = x%value * y
       z%vmul = x%vmul * y
       call link_mem_a(z, x)
    end if
  end function mul_ad

   function mul_da(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_double) :: z
    z = y * x
  end function mul_da
   function mul_az(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x * dble(y)
    z%im = x * aimag(y)
  end function mul_az

   function mul_za(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) * y
    z%im = aimag(x) * y
  end function mul_za

   function mul_bb(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re * y%re - x%im * y%im
    z%im = x%re * y%im + x%im * y%re
  end function mul_bb

   function mul_bz(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re * dble(y) - x%im * aimag(y)
    z%im = x%re * aimag(y) + x%im * dble(y)
  end function mul_bz

   function mul_zb(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) * y%re - aimag(x) * y%im
    z%im = dble(x) * y%im + aimag(x) * y%re
  end function mul_zb

   function mul_ba(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re * y
    z%im = x%im * y
  end function mul_ba

   function mul_ab(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x * y%re
    z%im = x * y%im
  end function mul_ab

   function mul_bi(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_complex) :: z
    z = x * dcmplx(y)
  end function mul_bi

   function mul_ib(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) * y
  end function mul_ib
   function mul_bd(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_complex) :: z
    z = x * dcmplx(y)
  end function mul_bd

   function mul_db(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) * y
  end function mul_db

  !!
  !! operator(/)
  !!

  ! X/Y = x/y + (x_j/y - x y_j/y**2) dj

   function div_aa(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x, y
    type(adjac_double) :: z
    z%value = x%value / y%value
    call sum_taylor(1d0/y%value, -x%value/(y%value**2), x, y, z)
  end function div_aa

   function div_ai(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_double) :: z
    z = (1d0 / y) * x
  end function div_ai

   function div_ia(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_double) :: z
    z = (-x / (y%value**2)) * y
    z%value = x / y%value
  end function div_ia
   function div_ad(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_double) :: z
    z = (1d0 / y) * x
  end function div_ad

   function div_da(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_double) :: z
    z = (-x / (y%value**2)) * y
    z%value = x / y%value
  end function div_da
   function div_az(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_az

   function div_za(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) / y
    z%im = aimag(x) / y
  end function div_za

   function div_bb(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_bb

   function div_bz(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_bz

   function div_zb(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_zb

   function div_ba(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_double), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re / y
    z%im = x%im / y
  end function div_ba

   function div_ab(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_ab

   function div_bi(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re / y
    z%im = x%im / y
  end function div_bi

   function div_ib(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) / y
  end function div_ib
   function div_bd(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re / y
    z%im = x%im / y
  end function div_bd

   function div_db(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) / y
  end function div_db

  !!
  !! operator(**)
  !!

   function pow_ai(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_double) :: z
    z = exp(y * log(x))
  end function pow_ai
   function pow_ad(x, y) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_double) :: z
    z = exp(y * log(x))
  end function pow_ad

  !!
  !! matmul
  !!

  function matmul_aa(x, y) result(z)
    implicit none
    type(adjac_double), dimension(:,:), intent(in) :: x, y
    type(adjac_double), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_aa

  function matmul_ai(x, y) result(z)
    implicit none
    type(adjac_double), dimension(:,:), intent(in) :: x
    integer, dimension(:,:), intent(in) :: y
    type(adjac_double), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_ai

  function matmul_ia(x, y) result(z)
    implicit none
    integer, dimension(:,:), intent(in) :: x
    type(adjac_double), dimension(:,:), intent(in) :: y
    type(adjac_double), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_ia
  function matmul_ad(x, y) result(z)
    implicit none
    type(adjac_double), dimension(:,:), intent(in) :: x
    double precision, dimension(:,:), intent(in) :: y
    type(adjac_double), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_ad

  function matmul_da(x, y) result(z)
    implicit none
    double precision, dimension(:,:), intent(in) :: x
    type(adjac_double), dimension(:,:), intent(in) :: y
    type(adjac_double), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_da
  function matmul_bb(x, y) result(z)
    implicit none
    type(adjac_complex), dimension(:,:), intent(in) :: x, y
    type(adjac_complex), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_bb

  function matmul_bz(x, y) result(z)
    implicit none
    type(adjac_complex), dimension(:,:), intent(in) :: x
    double complex, dimension(:,:), intent(in) :: y
    type(adjac_complex), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_bz

  function matmul_zb(x, y) result(z)
    implicit none
    double complex, dimension(:,:), intent(in) :: x
    type(adjac_complex), dimension(:,:), intent(in) :: y
    type(adjac_complex), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_zb

  !!
  !! dble
  !!

   function dble_a(x) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_double) :: z
    z = x
  end function dble_a

   function dble_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_double) :: z
    z = x%re
  end function dble_b

  !!
  !! aimag
  !!

   function aimag_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_double) :: z
    z = x%im
  end function aimag_b

  !!
  !! conjg
  !!

   function conjg_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    z%re = x%re
    z%im = -x%im
  end function conjg_b

  !!
  !! exp
  !!

   function exp_a(x) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_double) :: z
    double precision :: v, dv
    v = exp(x%value)
    dv = v
    z = dv*x
    z%value = v
  end function exp_a

   function exp_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    double complex :: v, dv
    v = exp(dcmplx(x%re%value, x%im%value))
    dv = v
    z = dv*x
    z%re%value = dble(v)
    z%im%value = aimag(v)
  end function exp_b

  !!
  !! sin
  !!

   function sin_a(x) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_double) :: z
    double precision :: v, dv
    v = sin(x%value)
    dv = cos(x%value)
    z = dv*x
    z%value = v
  end function sin_a

   function sin_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    double complex :: v, dv
    v = sin(dcmplx(x%re%value, x%im%value))
    dv = cos(dcmplx(x%re%value, x%im%value))
    z = dv*x
    z%re%value = dble(v)
    z%im%value = aimag(v)
  end function sin_b

  !!
  !! cos
  !!

   function cos_a(x) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_double) :: z
    double precision :: v, dv
    v = cos(x%value)
    dv = -sin(x%value)
    z = dv*x
    z%value = v
  end function cos_a

   function cos_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    double complex :: v, dv
    v = cos(dcmplx(x%re%value, x%im%value))
    dv = -sin(dcmplx(x%re%value, x%im%value))
    z = dv*x
    z%re%value = dble(v)
    z%im%value = aimag(v)
  end function cos_b

  !!
  !! log
  !!

   function log_a(x) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_double) :: z
    double precision :: v, dv
    v = log(x%value)
    dv = 1d0/x%value
    z = dv*x
    z%value = v
  end function log_a

   function log_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    double complex :: v, dv
    v = log(dcmplx(x%re%value, x%im%value))
    dv = 1d0/dcmplx(x%re%value, x%im%value)
    z = dv*x
    z%re%value = dble(v)
    z%im%value = aimag(v)
  end function log_b
   subroutine alloc_mem_q(x)
    implicit none
    type(adjac_complexan), intent(inout) :: x

    integer, dimension(:), allocatable :: itmp
    double complex, dimension(:), allocatable :: tmp
    integer :: sz

    if (jac_product_mode) then
       return
    end if
    if (.not.allocated(sum_map_q)) then
       sz = 0
    else
       sz = size(sum_map_q)
    end if

    if (sz < 2*free_q + 1) then
       ! Enlarge work space
       if (allocated(sum_map_q)) then
          sz = sz + 2*free_q + 1
          allocate(itmp(sz), tmp(sz))
          itmp(1:size(sum_map_q)) = sum_map_q(:)
          tmp(1:size(sum_mul_q)) = sum_mul_q(:)
          call move_alloc(itmp, sum_map_q)
          call move_alloc(tmp, sum_mul_q)
       else
          allocate(sum_map_q(100), sum_mul_q(100))
       end if
    end if

    x%i = free_q
    free_q = free_q + 1
  end subroutine alloc_mem_q

   subroutine link_mem_q(dst, src)
    implicit none
    type(adjac_complexan), intent(inout) :: dst
    type(adjac_complexan), intent(in) :: src
    dst%i = src%i
  end subroutine link_mem_q

   subroutine free_mem_q(x)
    implicit none
    type(adjac_complexan), intent(inout) :: x
    x%i = 0
  end subroutine free_mem_q

  subroutine set_independent_q(x, xval, j, dx)
    implicit none
    type(adjac_complexan), intent(out) :: x
    double complex, intent(in) :: xval
    double complex, optional, intent(in) :: dx
    integer, intent(in) :: j

    x%value = xval
    if (jac_product_mode) then
       if (.not.present(dx)) then
          call fatal_error('no dx given to adjac_set_independent when jacobian product mode is active')
       end if
       x%vmul = dx
    else
       x%vmul = 1
       call alloc_mem_q(x)
       sum_map_q(1 + 2*(x%i-1)) = 0
       sum_map_q(2 + 2*(x%i-1)) = j
    end if
  end subroutine set_independent_q

  subroutine set_independent_many_q(x, xval, dx)
    implicit none
    type(adjac_complexan), dimension(:), intent(inout) :: x
    double complex, dimension(size(x)), intent(in) :: xval
    double complex, dimension(size(x)), optional, intent(in) :: dx

    integer :: j

    if (present(dx)) then
       do j = 1, size(x,1)
          call set_independent_q(x(j), xval(j), j, dx(j))
       end do
    else
       do j = 1, size(x,1)
          call set_independent_q(x(j), xval(j), j)
       end do
    end if
  end subroutine set_independent_many_q

  subroutine get_value_one_q(y, val, dy)
    implicit none
    type(adjac_complexan), intent(in) :: y
    double complex, intent(out) :: val
    double complex, optional, intent(out) :: dy
    val = y%value
    if (present(dy)) then
       if (.not. jac_product_mode) then
          call fatal_error('call to adjac_get_value with dy when jacobian product mode is not active')
       end if
       dy = y%vmul
    end if
  end subroutine get_value_one_q

  subroutine get_value_many_q(y, val, dy)
    implicit none
    type(adjac_complexan), dimension(:), intent(in) :: y
    double complex, dimension(size(y,1)), intent(out) :: val
    double complex, dimension(size(y,1)), optional, intent(out) :: dy
    integer :: j
    do j = 1, size(val,1)
       val(j) = y(j)%value
    end do
    if (present(dy)) then
       if (.not. jac_product_mode) then
          call fatal_error('call to adjac_get_value with dy when jacobian product mode is not active')
       end if
       do j = 1, size(val,1)
          dy(j) = y(j)%vmul
       end do
    end if
  end subroutine get_value_many_q

  subroutine get_dense_jacobian_q(y, jac_dense)
    implicit none
    type(adjac_complexan), dimension(:), intent(inout) :: y
    double complex, dimension(:,:), intent(out) :: jac_dense
    double complex, dimension(block_size,free_q) :: work
    integer, dimension(free_q) :: iwork, imask
    integer :: k, j, ia, ib, kmin, kmax, nwork, j_next
    double complex :: v

    if (jac_product_mode) then
       call fatal_error('call to adjac_get_dense_jacobian when jacobian product mode is active')
    end if

    jac_dense = 0

    work = 0
    imask = 0

    do kmin = 1, size(y,1), block_size
       kmax = min(kmin + block_size - 1, size(y,1))

       nwork = 0
       do k = kmin, kmax
          work(k-kmin+1, y(k)%i) = y(k)%vmul
          call heap_push(iwork, nwork, y(k)%i)
          imask(y(k)%i) = 1
       end do

       
    ! Traverse the tape
    j_next = 0
    if (nwork > 0) then
       call heap_pop(iwork, nwork, j_next)
    end if
    do while (j_next > 0)
       j = j_next
       j_next = 0

       if (256*nwork > j) then
          ! Heap is too big, probably contains nearly all j values,
          ! and we are better off just looping through them
          nwork = j
          exit
       end if

       ia = sum_map_q(1+2*(j-1))
       ib = sum_map_q(2+2*(j-1))

       if (ia == 0) then
          jac_dense(kmin:kmax,ib) = work(1:(kmax-kmin+1),j)
       else
          
        work(:,ia) = work(:,ia) + sum_mul_q(1+2*(j-1)) * work(:,j)
        work(:,ib) = work(:,ib) + sum_mul_q(2+2*(j-1)) * work(:,j)
        
          if (imask(ia) == 0 .and. imask(ib) == 0) then
             call heap_push(iwork, nwork, ia)
             call heap_pushpop(iwork, nwork, ib, j_next)
             imask(ia) = 1
             imask(ib) = 1
          else if (imask(ia) == 0) then
             call heap_pushpop(iwork, nwork, ia, j_next)
             imask(ia) = 1
          else if (imask(ib) == 0) then
             call heap_pushpop(iwork, nwork, ib, j_next)
             imask(ib) = 1
          end if
       end if
       work(:,j) = 0
       imask(j) = 0

       if (nwork > 0 .and. j_next == 0) then
         call heap_pop(iwork, nwork, j_next)
       end if
    end do
    do j = nwork, 1, -1
      if (imask(j).ne.0) then
        ia = sum_map_q(1+2*(j-1))
        ib = sum_map_q(2+2*(j-1))
        if (ia == 0) then
          jac_dense(kmin:kmax,ib) = work(1:(kmax-kmin+1),j)
        else
          
        work(:,ia) = work(:,ia) + sum_mul_q(1+2*(j-1)) * work(:,j)
        work(:,ib) = work(:,ib) + sum_mul_q(2+2*(j-1)) * work(:,j)
        
          imask(ia) = 1
          imask(ib) = 1
        end if
        work(:,j) = 0
        imask(j) = 0
      end if
    end do

    end do
  end subroutine get_dense_jacobian_q

  subroutine get_coo_jacobian_q(y, jac_val, jac_i, jac_j)
    implicit none
    type(adjac_complexan), dimension(:), intent(inout) :: y
    double complex, dimension(:), allocatable, intent(inout) :: jac_val
    integer, dimension(:), allocatable, intent(inout) :: jac_i, jac_j
    double complex, dimension(block_size,free_q) :: work
    integer, dimension(free_q) :: iwork, imask
    integer, dimension(:), allocatable :: itmp
    double complex, dimension(:), allocatable :: vtmp
    integer :: kmin, kmax, k, j, ia, ib, nnz, nwork, j_next, sz
    double complex :: v

    if (jac_product_mode) then
       call fatal_error('call to adjac_get_coo_jacobian when jacobian product mode is active')
    end if

    if (allocated(jac_val)) deallocate(jac_val)
    if (allocated(jac_i)) deallocate(jac_i)
    if (allocated(jac_j)) deallocate(jac_j)

    sz = free_q + 10
    allocate(jac_val(sz), jac_i(sz), jac_j(sz))

    nnz = 0
    work = 0
    imask = 0

    do kmin = 1, size(y,1), block_size
       kmax = min(kmin + block_size - 1, size(y,1))

       nwork = 0
       do k = kmin, kmax
          work(k-kmin+1, y(k)%i) = y(k)%vmul
          call heap_push(iwork, nwork, y(k)%i)
          imask(y(k)%i) = 1
       end do

       
    ! Traverse the tape
    j_next = 0
    if (nwork > 0) then
       call heap_pop(iwork, nwork, j_next)
    end if
    do while (j_next > 0)
       j = j_next
       j_next = 0

       if (256*nwork > j) then
          ! Heap is too big, probably contains nearly all j values,
          ! and we are better off just looping through them
          nwork = j
          exit
       end if

       ia = sum_map_q(1+2*(j-1))
       ib = sum_map_q(2+2*(j-1))

       if (ia == 0) then
          
            do k = kmin, kmax
               if (work(k-kmin+1,j).ne.0) then
                   if (nnz >= sz) then
                      ! Exponential overallocation
                      sz = 2*sz + 1

                      allocate(itmp(sz))
                      itmp(1:nnz) = jac_i(1:nnz)
                      call move_alloc(itmp, jac_i)

                      allocate(itmp(sz))
                      itmp(1:nnz) = jac_j(1:nnz)
                      call move_alloc(itmp, jac_j)

                      allocate(vtmp(sz))
                      vtmp(1:nnz) = jac_val(1:nnz)
                      call move_alloc(vtmp, jac_val)
                   end if
                   nnz = nnz + 1
                   jac_i(nnz) = k
                   jac_j(nnz) = ib
                   jac_val(nnz) = work(k-kmin+1,j)
                end if
            end do
        
       else
          
        work(:,ia) = work(:,ia) + sum_mul_q(1+2*(j-1)) * work(:,j)
        work(:,ib) = work(:,ib) + sum_mul_q(2+2*(j-1)) * work(:,j)
        
          if (imask(ia) == 0 .and. imask(ib) == 0) then
             call heap_push(iwork, nwork, ia)
             call heap_pushpop(iwork, nwork, ib, j_next)
             imask(ia) = 1
             imask(ib) = 1
          else if (imask(ia) == 0) then
             call heap_pushpop(iwork, nwork, ia, j_next)
             imask(ia) = 1
          else if (imask(ib) == 0) then
             call heap_pushpop(iwork, nwork, ib, j_next)
             imask(ib) = 1
          end if
       end if
       work(:,j) = 0
       imask(j) = 0

       if (nwork > 0 .and. j_next == 0) then
         call heap_pop(iwork, nwork, j_next)
       end if
    end do
    do j = nwork, 1, -1
      if (imask(j).ne.0) then
        ia = sum_map_q(1+2*(j-1))
        ib = sum_map_q(2+2*(j-1))
        if (ia == 0) then
          
            do k = kmin, kmax
               if (work(k-kmin+1,j).ne.0) then
                   if (nnz >= sz) then
                      ! Exponential overallocation
                      sz = 2*sz + 1

                      allocate(itmp(sz))
                      itmp(1:nnz) = jac_i(1:nnz)
                      call move_alloc(itmp, jac_i)

                      allocate(itmp(sz))
                      itmp(1:nnz) = jac_j(1:nnz)
                      call move_alloc(itmp, jac_j)

                      allocate(vtmp(sz))
                      vtmp(1:nnz) = jac_val(1:nnz)
                      call move_alloc(vtmp, jac_val)
                   end if
                   nnz = nnz + 1
                   jac_i(nnz) = k
                   jac_j(nnz) = ib
                   jac_val(nnz) = work(k-kmin+1,j)
                end if
            end do
        
        else
          
        work(:,ia) = work(:,ia) + sum_mul_q(1+2*(j-1)) * work(:,j)
        work(:,ib) = work(:,ib) + sum_mul_q(2+2*(j-1)) * work(:,j)
        
          imask(ia) = 1
          imask(ib) = 1
        end if
        work(:,j) = 0
        imask(j) = 0
      end if
    end do

    end do

    if (nnz < sz) then
       ! Shrink to size
       allocate(itmp(nnz))
       itmp(1:nnz) = jac_i(1:nnz)
       call move_alloc(itmp, jac_i)
       allocate(itmp(nnz))
       itmp(1:nnz) = jac_j(1:nnz)
       call move_alloc(itmp, jac_j)
       allocate(vtmp(nnz))
       vtmp(1:nnz) = jac_val(1:nnz)
       call move_alloc(vtmp, jac_val)
    end if
  end subroutine get_coo_jacobian_q

   subroutine sum_taylor_q(alphap, betap, a, b, c)
    ! c := alpha*a + beta*b
    use iso_c_binding
    implicit none
    double complex, intent(in) :: alphap, betap
    type(adjac_complexan), intent(in) :: a, b
    type(adjac_complexan), intent(inout) :: c

    interface
        subroutine sparse_vector_sum_q(alpha, beta, na, nb, nc, ia, ib, ic, va, vb, vc) &
            bind(C,name="sparse_vector_sum_q")
         use iso_c_binding
         integer(kind=c_int), intent(in) :: na, nb, ia(*), ib(*)
         integer(kind=c_int), intent(inout) :: nc
         integer(kind=c_int), intent(out) :: ic(*)
         complex(kind=c_double_complex), intent(in) :: alpha, beta, va(*), vb(*)
         complex(kind=c_double_complex), intent(out) :: vc(*)
       end subroutine sparse_vector_sum_q
    end interface

    if (jac_product_mode) then
       c%vmul = alphap * a%vmul + betap * b%vmul
    else
       if (a%vmul == 0 .or. a%i == 0) then
          c%vmul = betap * b%vmul
          c%i = b%i
       else if (b%vmul == 0 .or. b%i == 0) then
          c%vmul = alphap * a%vmul
          c%i = a%i
       else if (a%i == b%i) then
          c%vmul = alphap * a%vmul + betap * b%vmul
          c%i = a%i
       else
          call alloc_mem_q(c)
          c%vmul = 1
          sum_map_q(1 + 2*(c%i-1)) = a%i
          sum_map_q(2 + 2*(c%i-1)) = b%i
          sum_mul_q(1 + 2*(c%i-1)) = alphap * a%vmul
          sum_mul_q(2 + 2*(c%i-1)) = betap * b%vmul
       end if
    end if
  end subroutine sum_taylor_q

  
  !--------------------------------------------------------------------------
  ! Overloaded operators
  !--------------------------------------------------------------------------

  !!
  !! assignment(=)
  !!

   subroutine assign_qi(x, y)
    implicit none
    type(adjac_complexan), intent(inout) :: x
    integer, intent(in) :: y
    call free_mem_q(x)
    x%value = y
    x%vmul = 0
  end subroutine assign_qi
   subroutine assign_qd(x, y)
    implicit none
    type(adjac_complexan), intent(inout) :: x
    double precision, intent(in) :: y
    call free_mem_q(x)
    x%value = y
    x%vmul = 0
  end subroutine assign_qd
   subroutine assign_qz(x, y)
    implicit none
    type(adjac_complexan), intent(inout) :: x
    double complex, intent(in) :: y
    call free_mem_q(x)
    x%value = y
    x%vmul = 0
  end subroutine assign_qz

  !!
  !! operator(+)
  !!

  ! X + Y = x + y + (x_j + y_j) dj

   function add_qq(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x, y
    type(adjac_complexan) :: z

    z%value = x%value + y%value
    call sum_taylor(dcmplx(1d0), dcmplx(1d0), x, y, z)
  end function add_qq

   function add_qi(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_complexan) :: z
    z%value = x%value + y
    z%vmul = x%vmul
    call link_mem_q(z, x)
  end function add_qi

   function add_iq(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z = y + x
  end function add_iq
   function add_qd(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_complexan) :: z
    z%value = x%value + y
    z%vmul = x%vmul
    call link_mem_q(z, x)
  end function add_qd

   function add_dq(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z = y + x
  end function add_dq
   function add_qz(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complexan) :: z
    z%value = x%value + y
    z%vmul = x%vmul
    call link_mem_q(z, x)
  end function add_qz

   function add_zq(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z = y + x
  end function add_zq

  !!
  !! operator(+), unary
  !!

   function pos_q(x) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    type(adjac_complexan) :: z
    z = x
  end function pos_q


  !!
  !! operator(-)
  !!

  ! X - Y = x - y + (x_j - y_j) dj

   function sub_qq(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x, y
    type(adjac_complexan) :: z

    z%value = x%value - y%value
    call sum_taylor(dcmplx(1d0), dcmplx(-1d0), x, y, z)
  end function sub_qq

   function sub_qi(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_complexan) :: z
    z%value = x%value - y
    z%vmul = x%vmul
    call link_mem_q(z, x)
  end function sub_qi

   function sub_iq(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z%value = x - y%value
    z%vmul = -y%vmul
    call link_mem_q(z, y)
  end function sub_iq
   function sub_qd(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_complexan) :: z
    z%value = x%value - y
    z%vmul = x%vmul
    call link_mem_q(z, x)
  end function sub_qd

   function sub_dq(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z%value = x - y%value
    z%vmul = -y%vmul
    call link_mem_q(z, y)
  end function sub_dq
   function sub_qz(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complexan) :: z
    z%value = x%value - y
    z%vmul = x%vmul
    call link_mem_q(z, x)
  end function sub_qz

   function sub_zq(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z%value = x - y%value
    z%vmul = -y%vmul
    call link_mem_q(z, y)
  end function sub_zq

  !!
  !! operator(-), unary
  !!

   function neg_q(x) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    type(adjac_complexan) :: z
    z = 0d0 - x
  end function neg_q


  !!
  !! operator(*)
  !!

  ! X*Y = x*y + (x y_j + y x_j) dj

   function mul_qq(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x, y
    type(adjac_complexan) :: z

    z%value = x%value * y%value
    call sum_taylor(y%value, x%value, x, y, z)
  end function mul_qq

   function mul_qi(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_complexan) :: z
    if (y == 0) then
       z%value = 0
       z%vmul = 0
    else
       z%value = x%value * y
       z%vmul = x%vmul * y
       call link_mem_q(z, x)
    end if
  end function mul_qi

   function mul_iq(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z = y * x
  end function mul_iq
   function mul_qd(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_complexan) :: z
    if (y == 0) then
       z%value = 0
       z%vmul = 0
    else
       z%value = x%value * y
       z%vmul = x%vmul * y
       call link_mem_q(z, x)
    end if
  end function mul_qd

   function mul_dq(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z = y * x
  end function mul_dq
   function mul_qz(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complexan) :: z
    if (y == 0) then
       z%value = 0
       z%vmul = 0
    else
       z%value = x%value * y
       z%vmul = x%vmul * y
       call link_mem_q(z, x)
    end if
  end function mul_qz

   function mul_zq(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z = y * x
  end function mul_zq

  !!
  !! operator(/)
  !!

  ! X/Y = x/y + (x_j/y - x y_j/y**2) dj

   function div_qq(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x, y
    type(adjac_complexan) :: z
    z%value = x%value / y%value
    call sum_taylor(1d0/y%value, -x%value/(y%value**2), x, y, z)
  end function div_qq

   function div_qi(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_complexan) :: z
    z = (1d0 / y) * x
  end function div_qi

   function div_iq(x, y) result(z)
    implicit none
    integer, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z = (-x / (y%value**2)) * y
    z%value = x / y%value
  end function div_iq
   function div_qd(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_complexan) :: z
    z = (1d0 / y) * x
  end function div_qd

   function div_dq(x, y) result(z)
    implicit none
    double precision, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z = (-x / (y%value**2)) * y
    z%value = x / y%value
  end function div_dq
   function div_qz(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complexan) :: z
    z = (1d0 / y) * x
  end function div_qz

   function div_zq(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complexan), intent(in) :: y
    type(adjac_complexan) :: z
    z = (-x / (y%value**2)) * y
    z%value = x / y%value
  end function div_zq

  !!
  !! operator(**)
  !!

   function pow_qi(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    integer, intent(in) :: y
    type(adjac_complexan) :: z
    z = exp(y * log(x))
  end function pow_qi
   function pow_qd(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double precision, intent(in) :: y
    type(adjac_complexan) :: z
    z = exp(y * log(x))
  end function pow_qd
   function pow_qz(x, y) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complexan) :: z
    z = exp(y * log(x))
  end function pow_qz

  !!
  !! matmul
  !!

  function matmul_qq(x, y) result(z)
    implicit none
    type(adjac_complexan), dimension(:,:), intent(in) :: x, y
    type(adjac_complexan), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_qq

  function matmul_qi(x, y) result(z)
    implicit none
    type(adjac_complexan), dimension(:,:), intent(in) :: x
    integer, dimension(:,:), intent(in) :: y
    type(adjac_complexan), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_qi

  function matmul_iq(x, y) result(z)
    implicit none
    integer, dimension(:,:), intent(in) :: x
    type(adjac_complexan), dimension(:,:), intent(in) :: y
    type(adjac_complexan), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_iq
  function matmul_qd(x, y) result(z)
    implicit none
    type(adjac_complexan), dimension(:,:), intent(in) :: x
    double precision, dimension(:,:), intent(in) :: y
    type(adjac_complexan), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_qd

  function matmul_dq(x, y) result(z)
    implicit none
    double precision, dimension(:,:), intent(in) :: x
    type(adjac_complexan), dimension(:,:), intent(in) :: y
    type(adjac_complexan), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_dq
  function matmul_qz(x, y) result(z)
    implicit none
    type(adjac_complexan), dimension(:,:), intent(in) :: x
    double complex, dimension(:,:), intent(in) :: y
    type(adjac_complexan), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_qz

  function matmul_zq(x, y) result(z)
    implicit none
    double complex, dimension(:,:), intent(in) :: x
    type(adjac_complexan), dimension(:,:), intent(in) :: y
    type(adjac_complexan), dimension(size(x,1),size(y,2)) :: z
        integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do

  end function matmul_zq

  !!
  !! dble
  !!


  !!
  !! aimag
  !!


  !!
  !! conjg
  !!


  !!
  !! exp
  !!

   function exp_q(x) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    type(adjac_complexan) :: z
    double complex :: v, dv
    v = exp(x%value)
    dv = v
    z = dv*x
    z%value = v
  end function exp_q


  !!
  !! sin
  !!

   function sin_q(x) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    type(adjac_complexan) :: z
    double complex :: v, dv
    v = sin(x%value)
    dv = cos(x%value)
    z = dv*x
    z%value = v
  end function sin_q


  !!
  !! cos
  !!

   function cos_q(x) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    type(adjac_complexan) :: z
    double complex :: v, dv
    v = cos(x%value)
    dv = -sin(x%value)
    z = dv*x
    z%value = v
  end function cos_q


  !!
  !! log
  !!

   function log_q(x) result(z)
    implicit none
    type(adjac_complexan), intent(in) :: x
    type(adjac_complexan) :: z
    double complex :: v, dv
    v = log(x%value)
    dv = 1d0/x%value
    z = dv*x
    z%value = v
  end function log_q

  
    subroutine assign_ai_1(c, a)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_double), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_ai(c(i), a(i))
      end do
    end subroutine assign_ai_1
    subroutine assign_ai_10(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_ai(c(i), a)
      end do
    end subroutine assign_ai_10
    subroutine assign_ai_2(c, a)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(out) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          call assign_ai(c(i,j), a(i,j))
        end do
      end do
    end subroutine assign_ai_2
    subroutine assign_ai_20(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(out) :: c
      integer :: i, j
      do j = 1, size(c,2)
        do i = 1, size(c,1)
          call assign_ai(c(i,j), a)
        end do
      end do
    end subroutine assign_ai_20
    subroutine assign_ai_3(c, a)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_ai(c(i,j,k), a(i,j,k))
          end do
        end do
      end do
    end subroutine assign_ai_3
    subroutine assign_ai_30(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_ai(c(i,j,k), a)
          end do
        end do
      end do
    end subroutine assign_ai_30
    subroutine assign_ai_4(c, a)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_ai(c(i,j,k,l), a(i,j,k,l))
            end do
          end do
        end do
      end do
    end subroutine assign_ai_4
    subroutine assign_ai_40(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_ai(c(i,j,k,l), a)
            end do
          end do
        end do
      end do
    end subroutine assign_ai_40
    
    subroutine assign_ad_1(c, a)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_double), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_ad(c(i), a(i))
      end do
    end subroutine assign_ad_1
    subroutine assign_ad_10(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_ad(c(i), a)
      end do
    end subroutine assign_ad_10
    subroutine assign_ad_2(c, a)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(out) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          call assign_ad(c(i,j), a(i,j))
        end do
      end do
    end subroutine assign_ad_2
    subroutine assign_ad_20(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(out) :: c
      integer :: i, j
      do j = 1, size(c,2)
        do i = 1, size(c,1)
          call assign_ad(c(i,j), a)
        end do
      end do
    end subroutine assign_ad_20
    subroutine assign_ad_3(c, a)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_ad(c(i,j,k), a(i,j,k))
          end do
        end do
      end do
    end subroutine assign_ad_3
    subroutine assign_ad_30(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_ad(c(i,j,k), a)
          end do
        end do
      end do
    end subroutine assign_ad_30
    subroutine assign_ad_4(c, a)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_ad(c(i,j,k,l), a(i,j,k,l))
            end do
          end do
        end do
      end do
    end subroutine assign_ad_4
    subroutine assign_ad_40(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_ad(c(i,j,k,l), a)
            end do
          end do
        end do
      end do
    end subroutine assign_ad_40
    
    subroutine assign_bi_1(c, a)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_bi(c(i), a(i))
      end do
    end subroutine assign_bi_1
    subroutine assign_bi_10(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_bi(c(i), a)
      end do
    end subroutine assign_bi_10
    subroutine assign_bi_2(c, a)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(out) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          call assign_bi(c(i,j), a(i,j))
        end do
      end do
    end subroutine assign_bi_2
    subroutine assign_bi_20(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(out) :: c
      integer :: i, j
      do j = 1, size(c,2)
        do i = 1, size(c,1)
          call assign_bi(c(i,j), a)
        end do
      end do
    end subroutine assign_bi_20
    subroutine assign_bi_3(c, a)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_bi(c(i,j,k), a(i,j,k))
          end do
        end do
      end do
    end subroutine assign_bi_3
    subroutine assign_bi_30(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_bi(c(i,j,k), a)
          end do
        end do
      end do
    end subroutine assign_bi_30
    subroutine assign_bi_4(c, a)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_bi(c(i,j,k,l), a(i,j,k,l))
            end do
          end do
        end do
      end do
    end subroutine assign_bi_4
    subroutine assign_bi_40(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_bi(c(i,j,k,l), a)
            end do
          end do
        end do
      end do
    end subroutine assign_bi_40
    
    subroutine assign_bd_1(c, a)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_bd(c(i), a(i))
      end do
    end subroutine assign_bd_1
    subroutine assign_bd_10(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_bd(c(i), a)
      end do
    end subroutine assign_bd_10
    subroutine assign_bd_2(c, a)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(out) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          call assign_bd(c(i,j), a(i,j))
        end do
      end do
    end subroutine assign_bd_2
    subroutine assign_bd_20(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(out) :: c
      integer :: i, j
      do j = 1, size(c,2)
        do i = 1, size(c,1)
          call assign_bd(c(i,j), a)
        end do
      end do
    end subroutine assign_bd_20
    subroutine assign_bd_3(c, a)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_bd(c(i,j,k), a(i,j,k))
          end do
        end do
      end do
    end subroutine assign_bd_3
    subroutine assign_bd_30(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_bd(c(i,j,k), a)
          end do
        end do
      end do
    end subroutine assign_bd_30
    subroutine assign_bd_4(c, a)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_bd(c(i,j,k,l), a(i,j,k,l))
            end do
          end do
        end do
      end do
    end subroutine assign_bd_4
    subroutine assign_bd_40(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_bd(c(i,j,k,l), a)
            end do
          end do
        end do
      end do
    end subroutine assign_bd_40
    
    subroutine assign_bz_1(c, a)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_bz(c(i), a(i))
      end do
    end subroutine assign_bz_1
    subroutine assign_bz_10(c, a)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_bz(c(i), a)
      end do
    end subroutine assign_bz_10
    subroutine assign_bz_2(c, a)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(out) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          call assign_bz(c(i,j), a(i,j))
        end do
      end do
    end subroutine assign_bz_2
    subroutine assign_bz_20(c, a)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(out) :: c
      integer :: i, j
      do j = 1, size(c,2)
        do i = 1, size(c,1)
          call assign_bz(c(i,j), a)
        end do
      end do
    end subroutine assign_bz_20
    subroutine assign_bz_3(c, a)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_bz(c(i,j,k), a(i,j,k))
          end do
        end do
      end do
    end subroutine assign_bz_3
    subroutine assign_bz_30(c, a)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_bz(c(i,j,k), a)
          end do
        end do
      end do
    end subroutine assign_bz_30
    subroutine assign_bz_4(c, a)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_bz(c(i,j,k,l), a(i,j,k,l))
            end do
          end do
        end do
      end do
    end subroutine assign_bz_4
    subroutine assign_bz_40(c, a)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_bz(c(i,j,k,l), a)
            end do
          end do
        end do
      end do
    end subroutine assign_bz_40
    
    subroutine assign_ba_1(c, a)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_ba(c(i), a(i))
      end do
    end subroutine assign_ba_1
    subroutine assign_ba_10(c, a)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_ba(c(i), a)
      end do
    end subroutine assign_ba_10
    subroutine assign_ba_2(c, a)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(out) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          call assign_ba(c(i,j), a(i,j))
        end do
      end do
    end subroutine assign_ba_2
    subroutine assign_ba_20(c, a)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(out) :: c
      integer :: i, j
      do j = 1, size(c,2)
        do i = 1, size(c,1)
          call assign_ba(c(i,j), a)
        end do
      end do
    end subroutine assign_ba_20
    subroutine assign_ba_3(c, a)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_ba(c(i,j,k), a(i,j,k))
          end do
        end do
      end do
    end subroutine assign_ba_3
    subroutine assign_ba_30(c, a)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_ba(c(i,j,k), a)
          end do
        end do
      end do
    end subroutine assign_ba_30
    subroutine assign_ba_4(c, a)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_ba(c(i,j,k,l), a(i,j,k,l))
            end do
          end do
        end do
      end do
    end subroutine assign_ba_4
    subroutine assign_ba_40(c, a)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_ba(c(i,j,k,l), a)
            end do
          end do
        end do
      end do
    end subroutine assign_ba_40
    
    subroutine assign_qi_1(c, a)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_qi(c(i), a(i))
      end do
    end subroutine assign_qi_1
    subroutine assign_qi_10(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_qi(c(i), a)
      end do
    end subroutine assign_qi_10
    subroutine assign_qi_2(c, a)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(out) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          call assign_qi(c(i,j), a(i,j))
        end do
      end do
    end subroutine assign_qi_2
    subroutine assign_qi_20(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(out) :: c
      integer :: i, j
      do j = 1, size(c,2)
        do i = 1, size(c,1)
          call assign_qi(c(i,j), a)
        end do
      end do
    end subroutine assign_qi_20
    subroutine assign_qi_3(c, a)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_qi(c(i,j,k), a(i,j,k))
          end do
        end do
      end do
    end subroutine assign_qi_3
    subroutine assign_qi_30(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_qi(c(i,j,k), a)
          end do
        end do
      end do
    end subroutine assign_qi_30
    subroutine assign_qi_4(c, a)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_qi(c(i,j,k,l), a(i,j,k,l))
            end do
          end do
        end do
      end do
    end subroutine assign_qi_4
    subroutine assign_qi_40(c, a)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_qi(c(i,j,k,l), a)
            end do
          end do
        end do
      end do
    end subroutine assign_qi_40
    
    subroutine assign_qd_1(c, a)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_qd(c(i), a(i))
      end do
    end subroutine assign_qd_1
    subroutine assign_qd_10(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_qd(c(i), a)
      end do
    end subroutine assign_qd_10
    subroutine assign_qd_2(c, a)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(out) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          call assign_qd(c(i,j), a(i,j))
        end do
      end do
    end subroutine assign_qd_2
    subroutine assign_qd_20(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(out) :: c
      integer :: i, j
      do j = 1, size(c,2)
        do i = 1, size(c,1)
          call assign_qd(c(i,j), a)
        end do
      end do
    end subroutine assign_qd_20
    subroutine assign_qd_3(c, a)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_qd(c(i,j,k), a(i,j,k))
          end do
        end do
      end do
    end subroutine assign_qd_3
    subroutine assign_qd_30(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_qd(c(i,j,k), a)
          end do
        end do
      end do
    end subroutine assign_qd_30
    subroutine assign_qd_4(c, a)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_qd(c(i,j,k,l), a(i,j,k,l))
            end do
          end do
        end do
      end do
    end subroutine assign_qd_4
    subroutine assign_qd_40(c, a)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_qd(c(i,j,k,l), a)
            end do
          end do
        end do
      end do
    end subroutine assign_qd_40
    
    subroutine assign_qz_1(c, a)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_qz(c(i), a(i))
      end do
    end subroutine assign_qz_1
    subroutine assign_qz_10(c, a)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(out) :: c
      integer :: i
      do i = 1, size(c)
        call assign_qz(c(i), a)
      end do
    end subroutine assign_qz_10
    subroutine assign_qz_2(c, a)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(out) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          call assign_qz(c(i,j), a(i,j))
        end do
      end do
    end subroutine assign_qz_2
    subroutine assign_qz_20(c, a)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(out) :: c
      integer :: i, j
      do j = 1, size(c,2)
        do i = 1, size(c,1)
          call assign_qz(c(i,j), a)
        end do
      end do
    end subroutine assign_qz_20
    subroutine assign_qz_3(c, a)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_qz(c(i,j,k), a(i,j,k))
          end do
        end do
      end do
    end subroutine assign_qz_3
    subroutine assign_qz_30(c, a)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(out) :: c
      integer :: i, j, k
      do k = 1, size(c,3)
        do j = 1, size(c,2)
          do i = 1, size(c,1)
            call assign_qz(c(i,j,k), a)
          end do
        end do
      end do
    end subroutine assign_qz_30
    subroutine assign_qz_4(c, a)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_qz(c(i,j,k,l), a(i,j,k,l))
            end do
          end do
        end do
      end do
    end subroutine assign_qz_4
    subroutine assign_qz_40(c, a)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(out) :: c
      integer :: i, j, k, l
      do l = 1, size(c,4)
        do k = 1, size(c,3)
          do j = 1, size(c,2)
            do i = 1, size(c,1)
              call assign_qz(c(i,j,k,l), a)
            end do
          end do
        end do
      end do
    end subroutine assign_qz_40
    
  
    function add_aa_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_aa(a(i), b(i))
      end do
    end function add_aa_1
    function add_aa_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_aa(a, b(i))
      end do
    end function add_aa_01
    function add_aa_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_aa(a(i), b)
      end do
    end function add_aa_10

    function add_aa_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_aa(a(i,j), b(i,j))
        end do
      end do
    end function add_aa_2
    function add_aa_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_aa(a, b(i,j))
        end do
      end do
    end function add_aa_02
    function add_aa_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_aa(a(i,j), b)
        end do
      end do
    end function add_aa_20

    function add_aa_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_aa(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_aa_3
    function add_aa_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_aa(a, b(i,j,k))
          end do
        end do
      end do
    end function add_aa_03
    function add_aa_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_aa(a(i,j,k), b)
          end do
        end do
      end do
    end function add_aa_30

    function add_aa_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_aa(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_aa_4
    function add_aa_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_aa(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_aa_04
    function add_aa_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_aa(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_aa_40
    
    function add_bb_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_bb(a(i), b(i))
      end do
    end function add_bb_1
    function add_bb_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_bb(a, b(i))
      end do
    end function add_bb_01
    function add_bb_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_bb(a(i), b)
      end do
    end function add_bb_10

    function add_bb_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_bb(a(i,j), b(i,j))
        end do
      end do
    end function add_bb_2
    function add_bb_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_bb(a, b(i,j))
        end do
      end do
    end function add_bb_02
    function add_bb_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_bb(a(i,j), b)
        end do
      end do
    end function add_bb_20

    function add_bb_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_bb(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_bb_3
    function add_bb_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_bb(a, b(i,j,k))
          end do
        end do
      end do
    end function add_bb_03
    function add_bb_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_bb(a(i,j,k), b)
          end do
        end do
      end do
    end function add_bb_30

    function add_bb_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_bb(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_bb_4
    function add_bb_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_bb(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_bb_04
    function add_bb_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_bb(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_bb_40
    
    function add_qq_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_qq(a(i), b(i))
      end do
    end function add_qq_1
    function add_qq_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_qq(a, b(i))
      end do
    end function add_qq_01
    function add_qq_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_qq(a(i), b)
      end do
    end function add_qq_10

    function add_qq_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_qq(a(i,j), b(i,j))
        end do
      end do
    end function add_qq_2
    function add_qq_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_qq(a, b(i,j))
        end do
      end do
    end function add_qq_02
    function add_qq_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_qq(a(i,j), b)
        end do
      end do
    end function add_qq_20

    function add_qq_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_qq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_qq_3
    function add_qq_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_qq(a, b(i,j,k))
          end do
        end do
      end do
    end function add_qq_03
    function add_qq_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_qq(a(i,j,k), b)
          end do
        end do
      end do
    end function add_qq_30

    function add_qq_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_qq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_qq_4
    function add_qq_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_qq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_qq_04
    function add_qq_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_qq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_qq_40
    
    function add_ab_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ab(a(i), b(i))
      end do
    end function add_ab_1
    function add_ab_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_ab(a, b(i))
      end do
    end function add_ab_01
    function add_ab_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ab(a(i), b)
      end do
    end function add_ab_10

    function add_ab_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ab(a(i,j), b(i,j))
        end do
      end do
    end function add_ab_2
    function add_ab_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_ab(a, b(i,j))
        end do
      end do
    end function add_ab_02
    function add_ab_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ab(a(i,j), b)
        end do
      end do
    end function add_ab_20

    function add_ab_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ab(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_ab_3
    function add_ab_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_ab(a, b(i,j,k))
          end do
        end do
      end do
    end function add_ab_03
    function add_ab_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ab(a(i,j,k), b)
          end do
        end do
      end do
    end function add_ab_30

    function add_ab_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ab(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ab_4
    function add_ab_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_ab(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ab_04
    function add_ab_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ab(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_ab_40
    
    function add_ba_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ba(a(i), b(i))
      end do
    end function add_ba_1
    function add_ba_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_ba(a, b(i))
      end do
    end function add_ba_01
    function add_ba_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ba(a(i), b)
      end do
    end function add_ba_10

    function add_ba_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ba(a(i,j), b(i,j))
        end do
      end do
    end function add_ba_2
    function add_ba_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_ba(a, b(i,j))
        end do
      end do
    end function add_ba_02
    function add_ba_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ba(a(i,j), b)
        end do
      end do
    end function add_ba_20

    function add_ba_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ba(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_ba_3
    function add_ba_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_ba(a, b(i,j,k))
          end do
        end do
      end do
    end function add_ba_03
    function add_ba_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ba(a(i,j,k), b)
          end do
        end do
      end do
    end function add_ba_30

    function add_ba_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ba(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ba_4
    function add_ba_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_ba(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ba_04
    function add_ba_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ba(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_ba_40
    
    function add_ai_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ai(a(i), b(i))
      end do
    end function add_ai_1
    function add_ai_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_ai(a, b(i))
      end do
    end function add_ai_01
    function add_ai_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ai(a(i), b)
      end do
    end function add_ai_10

    function add_ai_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ai(a(i,j), b(i,j))
        end do
      end do
    end function add_ai_2
    function add_ai_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_ai(a, b(i,j))
        end do
      end do
    end function add_ai_02
    function add_ai_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ai(a(i,j), b)
        end do
      end do
    end function add_ai_20

    function add_ai_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ai(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_ai_3
    function add_ai_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_ai(a, b(i,j,k))
          end do
        end do
      end do
    end function add_ai_03
    function add_ai_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ai(a(i,j,k), b)
          end do
        end do
      end do
    end function add_ai_30

    function add_ai_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ai(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ai_4
    function add_ai_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_ai(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ai_04
    function add_ai_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ai(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_ai_40
    
    function add_bi_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_bi(a(i), b(i))
      end do
    end function add_bi_1
    function add_bi_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_bi(a, b(i))
      end do
    end function add_bi_01
    function add_bi_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_bi(a(i), b)
      end do
    end function add_bi_10

    function add_bi_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_bi(a(i,j), b(i,j))
        end do
      end do
    end function add_bi_2
    function add_bi_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_bi(a, b(i,j))
        end do
      end do
    end function add_bi_02
    function add_bi_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_bi(a(i,j), b)
        end do
      end do
    end function add_bi_20

    function add_bi_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_bi(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_bi_3
    function add_bi_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_bi(a, b(i,j,k))
          end do
        end do
      end do
    end function add_bi_03
    function add_bi_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_bi(a(i,j,k), b)
          end do
        end do
      end do
    end function add_bi_30

    function add_bi_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_bi(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_bi_4
    function add_bi_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_bi(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_bi_04
    function add_bi_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_bi(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_bi_40
    
    function add_qi_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_qi(a(i), b(i))
      end do
    end function add_qi_1
    function add_qi_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_qi(a, b(i))
      end do
    end function add_qi_01
    function add_qi_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_qi(a(i), b)
      end do
    end function add_qi_10

    function add_qi_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_qi(a(i,j), b(i,j))
        end do
      end do
    end function add_qi_2
    function add_qi_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_qi(a, b(i,j))
        end do
      end do
    end function add_qi_02
    function add_qi_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_qi(a(i,j), b)
        end do
      end do
    end function add_qi_20

    function add_qi_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_qi(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_qi_3
    function add_qi_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_qi(a, b(i,j,k))
          end do
        end do
      end do
    end function add_qi_03
    function add_qi_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_qi(a(i,j,k), b)
          end do
        end do
      end do
    end function add_qi_30

    function add_qi_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_qi(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_qi_4
    function add_qi_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_qi(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_qi_04
    function add_qi_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_qi(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_qi_40
    
    function add_ia_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ia(a(i), b(i))
      end do
    end function add_ia_1
    function add_ia_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_ia(a, b(i))
      end do
    end function add_ia_01
    function add_ia_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ia(a(i), b)
      end do
    end function add_ia_10

    function add_ia_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ia(a(i,j), b(i,j))
        end do
      end do
    end function add_ia_2
    function add_ia_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_ia(a, b(i,j))
        end do
      end do
    end function add_ia_02
    function add_ia_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ia(a(i,j), b)
        end do
      end do
    end function add_ia_20

    function add_ia_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ia(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_ia_3
    function add_ia_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_ia(a, b(i,j,k))
          end do
        end do
      end do
    end function add_ia_03
    function add_ia_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ia(a(i,j,k), b)
          end do
        end do
      end do
    end function add_ia_30

    function add_ia_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ia(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ia_4
    function add_ia_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_ia(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ia_04
    function add_ia_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ia(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_ia_40
    
    function add_ib_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ib(a(i), b(i))
      end do
    end function add_ib_1
    function add_ib_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_ib(a, b(i))
      end do
    end function add_ib_01
    function add_ib_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ib(a(i), b)
      end do
    end function add_ib_10

    function add_ib_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ib(a(i,j), b(i,j))
        end do
      end do
    end function add_ib_2
    function add_ib_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_ib(a, b(i,j))
        end do
      end do
    end function add_ib_02
    function add_ib_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ib(a(i,j), b)
        end do
      end do
    end function add_ib_20

    function add_ib_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ib(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_ib_3
    function add_ib_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_ib(a, b(i,j,k))
          end do
        end do
      end do
    end function add_ib_03
    function add_ib_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ib(a(i,j,k), b)
          end do
        end do
      end do
    end function add_ib_30

    function add_ib_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ib(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ib_4
    function add_ib_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_ib(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ib_04
    function add_ib_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ib(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_ib_40
    
    function add_iq_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_iq(a(i), b(i))
      end do
    end function add_iq_1
    function add_iq_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_iq(a, b(i))
      end do
    end function add_iq_01
    function add_iq_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_iq(a(i), b)
      end do
    end function add_iq_10

    function add_iq_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_iq(a(i,j), b(i,j))
        end do
      end do
    end function add_iq_2
    function add_iq_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_iq(a, b(i,j))
        end do
      end do
    end function add_iq_02
    function add_iq_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_iq(a(i,j), b)
        end do
      end do
    end function add_iq_20

    function add_iq_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_iq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_iq_3
    function add_iq_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_iq(a, b(i,j,k))
          end do
        end do
      end do
    end function add_iq_03
    function add_iq_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_iq(a(i,j,k), b)
          end do
        end do
      end do
    end function add_iq_30

    function add_iq_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_iq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_iq_4
    function add_iq_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_iq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_iq_04
    function add_iq_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_iq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_iq_40
    
    function add_ad_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ad(a(i), b(i))
      end do
    end function add_ad_1
    function add_ad_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_ad(a, b(i))
      end do
    end function add_ad_01
    function add_ad_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_ad(a(i), b)
      end do
    end function add_ad_10

    function add_ad_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ad(a(i,j), b(i,j))
        end do
      end do
    end function add_ad_2
    function add_ad_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_ad(a, b(i,j))
        end do
      end do
    end function add_ad_02
    function add_ad_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_ad(a(i,j), b)
        end do
      end do
    end function add_ad_20

    function add_ad_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ad(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_ad_3
    function add_ad_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_ad(a, b(i,j,k))
          end do
        end do
      end do
    end function add_ad_03
    function add_ad_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_ad(a(i,j,k), b)
          end do
        end do
      end do
    end function add_ad_30

    function add_ad_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ad(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ad_4
    function add_ad_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_ad(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_ad_04
    function add_ad_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_ad(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_ad_40
    
    function add_bd_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_bd(a(i), b(i))
      end do
    end function add_bd_1
    function add_bd_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_bd(a, b(i))
      end do
    end function add_bd_01
    function add_bd_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_bd(a(i), b)
      end do
    end function add_bd_10

    function add_bd_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_bd(a(i,j), b(i,j))
        end do
      end do
    end function add_bd_2
    function add_bd_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_bd(a, b(i,j))
        end do
      end do
    end function add_bd_02
    function add_bd_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_bd(a(i,j), b)
        end do
      end do
    end function add_bd_20

    function add_bd_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_bd(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_bd_3
    function add_bd_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_bd(a, b(i,j,k))
          end do
        end do
      end do
    end function add_bd_03
    function add_bd_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_bd(a(i,j,k), b)
          end do
        end do
      end do
    end function add_bd_30

    function add_bd_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_bd(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_bd_4
    function add_bd_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_bd(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_bd_04
    function add_bd_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_bd(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_bd_40
    
    function add_qd_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_qd(a(i), b(i))
      end do
    end function add_qd_1
    function add_qd_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_qd(a, b(i))
      end do
    end function add_qd_01
    function add_qd_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_qd(a(i), b)
      end do
    end function add_qd_10

    function add_qd_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_qd(a(i,j), b(i,j))
        end do
      end do
    end function add_qd_2
    function add_qd_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_qd(a, b(i,j))
        end do
      end do
    end function add_qd_02
    function add_qd_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_qd(a(i,j), b)
        end do
      end do
    end function add_qd_20

    function add_qd_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_qd(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_qd_3
    function add_qd_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_qd(a, b(i,j,k))
          end do
        end do
      end do
    end function add_qd_03
    function add_qd_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_qd(a(i,j,k), b)
          end do
        end do
      end do
    end function add_qd_30

    function add_qd_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_qd(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_qd_4
    function add_qd_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_qd(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_qd_04
    function add_qd_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_qd(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_qd_40
    
    function add_da_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_da(a(i), b(i))
      end do
    end function add_da_1
    function add_da_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_da(a, b(i))
      end do
    end function add_da_01
    function add_da_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_da(a(i), b)
      end do
    end function add_da_10

    function add_da_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_da(a(i,j), b(i,j))
        end do
      end do
    end function add_da_2
    function add_da_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_da(a, b(i,j))
        end do
      end do
    end function add_da_02
    function add_da_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_da(a(i,j), b)
        end do
      end do
    end function add_da_20

    function add_da_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_da(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_da_3
    function add_da_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_da(a, b(i,j,k))
          end do
        end do
      end do
    end function add_da_03
    function add_da_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_da(a(i,j,k), b)
          end do
        end do
      end do
    end function add_da_30

    function add_da_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_da(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_da_4
    function add_da_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_da(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_da_04
    function add_da_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_da(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_da_40
    
    function add_db_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_db(a(i), b(i))
      end do
    end function add_db_1
    function add_db_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_db(a, b(i))
      end do
    end function add_db_01
    function add_db_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_db(a(i), b)
      end do
    end function add_db_10

    function add_db_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_db(a(i,j), b(i,j))
        end do
      end do
    end function add_db_2
    function add_db_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_db(a, b(i,j))
        end do
      end do
    end function add_db_02
    function add_db_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_db(a(i,j), b)
        end do
      end do
    end function add_db_20

    function add_db_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_db(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_db_3
    function add_db_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_db(a, b(i,j,k))
          end do
        end do
      end do
    end function add_db_03
    function add_db_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_db(a(i,j,k), b)
          end do
        end do
      end do
    end function add_db_30

    function add_db_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_db(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_db_4
    function add_db_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_db(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_db_04
    function add_db_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_db(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_db_40
    
    function add_dq_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_dq(a(i), b(i))
      end do
    end function add_dq_1
    function add_dq_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_dq(a, b(i))
      end do
    end function add_dq_01
    function add_dq_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_dq(a(i), b)
      end do
    end function add_dq_10

    function add_dq_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_dq(a(i,j), b(i,j))
        end do
      end do
    end function add_dq_2
    function add_dq_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_dq(a, b(i,j))
        end do
      end do
    end function add_dq_02
    function add_dq_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_dq(a(i,j), b)
        end do
      end do
    end function add_dq_20

    function add_dq_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_dq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_dq_3
    function add_dq_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_dq(a, b(i,j,k))
          end do
        end do
      end do
    end function add_dq_03
    function add_dq_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_dq(a(i,j,k), b)
          end do
        end do
      end do
    end function add_dq_30

    function add_dq_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_dq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_dq_4
    function add_dq_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_dq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_dq_04
    function add_dq_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_dq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_dq_40
    
    function add_az_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_az(a(i), b(i))
      end do
    end function add_az_1
    function add_az_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_az(a, b(i))
      end do
    end function add_az_01
    function add_az_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_az(a(i), b)
      end do
    end function add_az_10

    function add_az_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_az(a(i,j), b(i,j))
        end do
      end do
    end function add_az_2
    function add_az_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_az(a, b(i,j))
        end do
      end do
    end function add_az_02
    function add_az_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_az(a(i,j), b)
        end do
      end do
    end function add_az_20

    function add_az_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_az(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_az_3
    function add_az_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_az(a, b(i,j,k))
          end do
        end do
      end do
    end function add_az_03
    function add_az_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_az(a(i,j,k), b)
          end do
        end do
      end do
    end function add_az_30

    function add_az_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_az(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_az_4
    function add_az_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_az(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_az_04
    function add_az_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_az(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_az_40
    
    function add_bz_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_bz(a(i), b(i))
      end do
    end function add_bz_1
    function add_bz_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_bz(a, b(i))
      end do
    end function add_bz_01
    function add_bz_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_bz(a(i), b)
      end do
    end function add_bz_10

    function add_bz_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_bz(a(i,j), b(i,j))
        end do
      end do
    end function add_bz_2
    function add_bz_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_bz(a, b(i,j))
        end do
      end do
    end function add_bz_02
    function add_bz_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_bz(a(i,j), b)
        end do
      end do
    end function add_bz_20

    function add_bz_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_bz(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_bz_3
    function add_bz_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_bz(a, b(i,j,k))
          end do
        end do
      end do
    end function add_bz_03
    function add_bz_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_bz(a(i,j,k), b)
          end do
        end do
      end do
    end function add_bz_30

    function add_bz_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_bz(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_bz_4
    function add_bz_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_bz(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_bz_04
    function add_bz_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_bz(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_bz_40
    
    function add_qz_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_qz(a(i), b(i))
      end do
    end function add_qz_1
    function add_qz_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_qz(a, b(i))
      end do
    end function add_qz_01
    function add_qz_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_qz(a(i), b)
      end do
    end function add_qz_10

    function add_qz_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_qz(a(i,j), b(i,j))
        end do
      end do
    end function add_qz_2
    function add_qz_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_qz(a, b(i,j))
        end do
      end do
    end function add_qz_02
    function add_qz_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_qz(a(i,j), b)
        end do
      end do
    end function add_qz_20

    function add_qz_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_qz(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_qz_3
    function add_qz_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_qz(a, b(i,j,k))
          end do
        end do
      end do
    end function add_qz_03
    function add_qz_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_qz(a(i,j,k), b)
          end do
        end do
      end do
    end function add_qz_30

    function add_qz_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_qz(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_qz_4
    function add_qz_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_qz(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_qz_04
    function add_qz_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_qz(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_qz_40
    
    function add_za_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_za(a(i), b(i))
      end do
    end function add_za_1
    function add_za_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_za(a, b(i))
      end do
    end function add_za_01
    function add_za_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_za(a(i), b)
      end do
    end function add_za_10

    function add_za_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_za(a(i,j), b(i,j))
        end do
      end do
    end function add_za_2
    function add_za_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_za(a, b(i,j))
        end do
      end do
    end function add_za_02
    function add_za_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_za(a(i,j), b)
        end do
      end do
    end function add_za_20

    function add_za_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_za(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_za_3
    function add_za_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_za(a, b(i,j,k))
          end do
        end do
      end do
    end function add_za_03
    function add_za_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_za(a(i,j,k), b)
          end do
        end do
      end do
    end function add_za_30

    function add_za_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_za(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_za_4
    function add_za_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_za(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_za_04
    function add_za_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_za(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_za_40
    
    function add_zb_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_zb(a(i), b(i))
      end do
    end function add_zb_1
    function add_zb_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_zb(a, b(i))
      end do
    end function add_zb_01
    function add_zb_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_zb(a(i), b)
      end do
    end function add_zb_10

    function add_zb_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_zb(a(i,j), b(i,j))
        end do
      end do
    end function add_zb_2
    function add_zb_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_zb(a, b(i,j))
        end do
      end do
    end function add_zb_02
    function add_zb_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_zb(a(i,j), b)
        end do
      end do
    end function add_zb_20

    function add_zb_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_zb(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_zb_3
    function add_zb_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_zb(a, b(i,j,k))
          end do
        end do
      end do
    end function add_zb_03
    function add_zb_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_zb(a(i,j,k), b)
          end do
        end do
      end do
    end function add_zb_30

    function add_zb_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_zb(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_zb_4
    function add_zb_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_zb(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_zb_04
    function add_zb_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_zb(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_zb_40
    
    function add_zq_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_zq(a(i), b(i))
      end do
    end function add_zq_1
    function add_zq_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = add_zq(a, b(i))
      end do
    end function add_zq_01
    function add_zq_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = add_zq(a(i), b)
      end do
    end function add_zq_10

    function add_zq_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_zq(a(i,j), b(i,j))
        end do
      end do
    end function add_zq_2
    function add_zq_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = add_zq(a, b(i,j))
        end do
      end do
    end function add_zq_02
    function add_zq_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = add_zq(a(i,j), b)
        end do
      end do
    end function add_zq_20

    function add_zq_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_zq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function add_zq_3
    function add_zq_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = add_zq(a, b(i,j,k))
          end do
        end do
      end do
    end function add_zq_03
    function add_zq_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = add_zq(a(i,j,k), b)
          end do
        end do
      end do
    end function add_zq_30

    function add_zq_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_zq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_zq_4
    function add_zq_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = add_zq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function add_zq_04
    function add_zq_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = add_zq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function add_zq_40
    
  
    function sub_aa_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_aa(a(i), b(i))
      end do
    end function sub_aa_1
    function sub_aa_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_aa(a, b(i))
      end do
    end function sub_aa_01
    function sub_aa_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_aa(a(i), b)
      end do
    end function sub_aa_10

    function sub_aa_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_aa(a(i,j), b(i,j))
        end do
      end do
    end function sub_aa_2
    function sub_aa_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_aa(a, b(i,j))
        end do
      end do
    end function sub_aa_02
    function sub_aa_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_aa(a(i,j), b)
        end do
      end do
    end function sub_aa_20

    function sub_aa_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_aa(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_aa_3
    function sub_aa_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_aa(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_aa_03
    function sub_aa_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_aa(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_aa_30

    function sub_aa_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_aa(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_aa_4
    function sub_aa_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_aa(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_aa_04
    function sub_aa_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_aa(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_aa_40
    
    function sub_bb_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_bb(a(i), b(i))
      end do
    end function sub_bb_1
    function sub_bb_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_bb(a, b(i))
      end do
    end function sub_bb_01
    function sub_bb_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_bb(a(i), b)
      end do
    end function sub_bb_10

    function sub_bb_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_bb(a(i,j), b(i,j))
        end do
      end do
    end function sub_bb_2
    function sub_bb_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_bb(a, b(i,j))
        end do
      end do
    end function sub_bb_02
    function sub_bb_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_bb(a(i,j), b)
        end do
      end do
    end function sub_bb_20

    function sub_bb_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_bb(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_bb_3
    function sub_bb_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_bb(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_bb_03
    function sub_bb_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_bb(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_bb_30

    function sub_bb_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_bb(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_bb_4
    function sub_bb_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_bb(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_bb_04
    function sub_bb_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_bb(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_bb_40
    
    function sub_qq_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_qq(a(i), b(i))
      end do
    end function sub_qq_1
    function sub_qq_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_qq(a, b(i))
      end do
    end function sub_qq_01
    function sub_qq_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_qq(a(i), b)
      end do
    end function sub_qq_10

    function sub_qq_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_qq(a(i,j), b(i,j))
        end do
      end do
    end function sub_qq_2
    function sub_qq_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_qq(a, b(i,j))
        end do
      end do
    end function sub_qq_02
    function sub_qq_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_qq(a(i,j), b)
        end do
      end do
    end function sub_qq_20

    function sub_qq_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_qq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_qq_3
    function sub_qq_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_qq(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_qq_03
    function sub_qq_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_qq(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_qq_30

    function sub_qq_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_qq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_qq_4
    function sub_qq_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_qq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_qq_04
    function sub_qq_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_qq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_qq_40
    
    function sub_ab_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ab(a(i), b(i))
      end do
    end function sub_ab_1
    function sub_ab_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_ab(a, b(i))
      end do
    end function sub_ab_01
    function sub_ab_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ab(a(i), b)
      end do
    end function sub_ab_10

    function sub_ab_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ab(a(i,j), b(i,j))
        end do
      end do
    end function sub_ab_2
    function sub_ab_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_ab(a, b(i,j))
        end do
      end do
    end function sub_ab_02
    function sub_ab_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ab(a(i,j), b)
        end do
      end do
    end function sub_ab_20

    function sub_ab_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ab(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_ab_3
    function sub_ab_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_ab(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_ab_03
    function sub_ab_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ab(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_ab_30

    function sub_ab_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ab(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ab_4
    function sub_ab_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_ab(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ab_04
    function sub_ab_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ab(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_ab_40
    
    function sub_ba_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ba(a(i), b(i))
      end do
    end function sub_ba_1
    function sub_ba_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_ba(a, b(i))
      end do
    end function sub_ba_01
    function sub_ba_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ba(a(i), b)
      end do
    end function sub_ba_10

    function sub_ba_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ba(a(i,j), b(i,j))
        end do
      end do
    end function sub_ba_2
    function sub_ba_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_ba(a, b(i,j))
        end do
      end do
    end function sub_ba_02
    function sub_ba_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ba(a(i,j), b)
        end do
      end do
    end function sub_ba_20

    function sub_ba_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ba(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_ba_3
    function sub_ba_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_ba(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_ba_03
    function sub_ba_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ba(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_ba_30

    function sub_ba_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ba(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ba_4
    function sub_ba_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_ba(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ba_04
    function sub_ba_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ba(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_ba_40
    
    function sub_ai_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ai(a(i), b(i))
      end do
    end function sub_ai_1
    function sub_ai_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_ai(a, b(i))
      end do
    end function sub_ai_01
    function sub_ai_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ai(a(i), b)
      end do
    end function sub_ai_10

    function sub_ai_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ai(a(i,j), b(i,j))
        end do
      end do
    end function sub_ai_2
    function sub_ai_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_ai(a, b(i,j))
        end do
      end do
    end function sub_ai_02
    function sub_ai_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ai(a(i,j), b)
        end do
      end do
    end function sub_ai_20

    function sub_ai_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ai(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_ai_3
    function sub_ai_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_ai(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_ai_03
    function sub_ai_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ai(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_ai_30

    function sub_ai_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ai(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ai_4
    function sub_ai_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_ai(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ai_04
    function sub_ai_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ai(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_ai_40
    
    function sub_bi_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_bi(a(i), b(i))
      end do
    end function sub_bi_1
    function sub_bi_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_bi(a, b(i))
      end do
    end function sub_bi_01
    function sub_bi_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_bi(a(i), b)
      end do
    end function sub_bi_10

    function sub_bi_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_bi(a(i,j), b(i,j))
        end do
      end do
    end function sub_bi_2
    function sub_bi_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_bi(a, b(i,j))
        end do
      end do
    end function sub_bi_02
    function sub_bi_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_bi(a(i,j), b)
        end do
      end do
    end function sub_bi_20

    function sub_bi_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_bi(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_bi_3
    function sub_bi_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_bi(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_bi_03
    function sub_bi_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_bi(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_bi_30

    function sub_bi_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_bi(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_bi_4
    function sub_bi_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_bi(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_bi_04
    function sub_bi_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_bi(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_bi_40
    
    function sub_qi_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_qi(a(i), b(i))
      end do
    end function sub_qi_1
    function sub_qi_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_qi(a, b(i))
      end do
    end function sub_qi_01
    function sub_qi_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_qi(a(i), b)
      end do
    end function sub_qi_10

    function sub_qi_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_qi(a(i,j), b(i,j))
        end do
      end do
    end function sub_qi_2
    function sub_qi_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_qi(a, b(i,j))
        end do
      end do
    end function sub_qi_02
    function sub_qi_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_qi(a(i,j), b)
        end do
      end do
    end function sub_qi_20

    function sub_qi_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_qi(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_qi_3
    function sub_qi_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_qi(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_qi_03
    function sub_qi_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_qi(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_qi_30

    function sub_qi_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_qi(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_qi_4
    function sub_qi_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_qi(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_qi_04
    function sub_qi_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_qi(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_qi_40
    
    function sub_ia_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ia(a(i), b(i))
      end do
    end function sub_ia_1
    function sub_ia_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_ia(a, b(i))
      end do
    end function sub_ia_01
    function sub_ia_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ia(a(i), b)
      end do
    end function sub_ia_10

    function sub_ia_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ia(a(i,j), b(i,j))
        end do
      end do
    end function sub_ia_2
    function sub_ia_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_ia(a, b(i,j))
        end do
      end do
    end function sub_ia_02
    function sub_ia_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ia(a(i,j), b)
        end do
      end do
    end function sub_ia_20

    function sub_ia_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ia(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_ia_3
    function sub_ia_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_ia(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_ia_03
    function sub_ia_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ia(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_ia_30

    function sub_ia_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ia(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ia_4
    function sub_ia_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_ia(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ia_04
    function sub_ia_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ia(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_ia_40
    
    function sub_ib_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ib(a(i), b(i))
      end do
    end function sub_ib_1
    function sub_ib_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_ib(a, b(i))
      end do
    end function sub_ib_01
    function sub_ib_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ib(a(i), b)
      end do
    end function sub_ib_10

    function sub_ib_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ib(a(i,j), b(i,j))
        end do
      end do
    end function sub_ib_2
    function sub_ib_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_ib(a, b(i,j))
        end do
      end do
    end function sub_ib_02
    function sub_ib_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ib(a(i,j), b)
        end do
      end do
    end function sub_ib_20

    function sub_ib_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ib(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_ib_3
    function sub_ib_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_ib(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_ib_03
    function sub_ib_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ib(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_ib_30

    function sub_ib_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ib(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ib_4
    function sub_ib_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_ib(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ib_04
    function sub_ib_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ib(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_ib_40
    
    function sub_iq_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_iq(a(i), b(i))
      end do
    end function sub_iq_1
    function sub_iq_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_iq(a, b(i))
      end do
    end function sub_iq_01
    function sub_iq_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_iq(a(i), b)
      end do
    end function sub_iq_10

    function sub_iq_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_iq(a(i,j), b(i,j))
        end do
      end do
    end function sub_iq_2
    function sub_iq_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_iq(a, b(i,j))
        end do
      end do
    end function sub_iq_02
    function sub_iq_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_iq(a(i,j), b)
        end do
      end do
    end function sub_iq_20

    function sub_iq_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_iq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_iq_3
    function sub_iq_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_iq(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_iq_03
    function sub_iq_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_iq(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_iq_30

    function sub_iq_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_iq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_iq_4
    function sub_iq_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_iq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_iq_04
    function sub_iq_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_iq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_iq_40
    
    function sub_ad_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ad(a(i), b(i))
      end do
    end function sub_ad_1
    function sub_ad_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_ad(a, b(i))
      end do
    end function sub_ad_01
    function sub_ad_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_ad(a(i), b)
      end do
    end function sub_ad_10

    function sub_ad_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ad(a(i,j), b(i,j))
        end do
      end do
    end function sub_ad_2
    function sub_ad_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_ad(a, b(i,j))
        end do
      end do
    end function sub_ad_02
    function sub_ad_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_ad(a(i,j), b)
        end do
      end do
    end function sub_ad_20

    function sub_ad_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ad(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_ad_3
    function sub_ad_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_ad(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_ad_03
    function sub_ad_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_ad(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_ad_30

    function sub_ad_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ad(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ad_4
    function sub_ad_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_ad(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_ad_04
    function sub_ad_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_ad(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_ad_40
    
    function sub_bd_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_bd(a(i), b(i))
      end do
    end function sub_bd_1
    function sub_bd_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_bd(a, b(i))
      end do
    end function sub_bd_01
    function sub_bd_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_bd(a(i), b)
      end do
    end function sub_bd_10

    function sub_bd_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_bd(a(i,j), b(i,j))
        end do
      end do
    end function sub_bd_2
    function sub_bd_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_bd(a, b(i,j))
        end do
      end do
    end function sub_bd_02
    function sub_bd_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_bd(a(i,j), b)
        end do
      end do
    end function sub_bd_20

    function sub_bd_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_bd(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_bd_3
    function sub_bd_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_bd(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_bd_03
    function sub_bd_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_bd(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_bd_30

    function sub_bd_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_bd(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_bd_4
    function sub_bd_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_bd(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_bd_04
    function sub_bd_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_bd(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_bd_40
    
    function sub_qd_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_qd(a(i), b(i))
      end do
    end function sub_qd_1
    function sub_qd_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_qd(a, b(i))
      end do
    end function sub_qd_01
    function sub_qd_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_qd(a(i), b)
      end do
    end function sub_qd_10

    function sub_qd_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_qd(a(i,j), b(i,j))
        end do
      end do
    end function sub_qd_2
    function sub_qd_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_qd(a, b(i,j))
        end do
      end do
    end function sub_qd_02
    function sub_qd_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_qd(a(i,j), b)
        end do
      end do
    end function sub_qd_20

    function sub_qd_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_qd(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_qd_3
    function sub_qd_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_qd(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_qd_03
    function sub_qd_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_qd(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_qd_30

    function sub_qd_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_qd(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_qd_4
    function sub_qd_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_qd(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_qd_04
    function sub_qd_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_qd(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_qd_40
    
    function sub_da_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_da(a(i), b(i))
      end do
    end function sub_da_1
    function sub_da_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_da(a, b(i))
      end do
    end function sub_da_01
    function sub_da_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_da(a(i), b)
      end do
    end function sub_da_10

    function sub_da_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_da(a(i,j), b(i,j))
        end do
      end do
    end function sub_da_2
    function sub_da_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_da(a, b(i,j))
        end do
      end do
    end function sub_da_02
    function sub_da_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_da(a(i,j), b)
        end do
      end do
    end function sub_da_20

    function sub_da_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_da(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_da_3
    function sub_da_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_da(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_da_03
    function sub_da_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_da(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_da_30

    function sub_da_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_da(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_da_4
    function sub_da_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_da(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_da_04
    function sub_da_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_da(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_da_40
    
    function sub_db_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_db(a(i), b(i))
      end do
    end function sub_db_1
    function sub_db_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_db(a, b(i))
      end do
    end function sub_db_01
    function sub_db_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_db(a(i), b)
      end do
    end function sub_db_10

    function sub_db_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_db(a(i,j), b(i,j))
        end do
      end do
    end function sub_db_2
    function sub_db_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_db(a, b(i,j))
        end do
      end do
    end function sub_db_02
    function sub_db_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_db(a(i,j), b)
        end do
      end do
    end function sub_db_20

    function sub_db_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_db(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_db_3
    function sub_db_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_db(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_db_03
    function sub_db_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_db(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_db_30

    function sub_db_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_db(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_db_4
    function sub_db_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_db(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_db_04
    function sub_db_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_db(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_db_40
    
    function sub_dq_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_dq(a(i), b(i))
      end do
    end function sub_dq_1
    function sub_dq_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_dq(a, b(i))
      end do
    end function sub_dq_01
    function sub_dq_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_dq(a(i), b)
      end do
    end function sub_dq_10

    function sub_dq_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_dq(a(i,j), b(i,j))
        end do
      end do
    end function sub_dq_2
    function sub_dq_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_dq(a, b(i,j))
        end do
      end do
    end function sub_dq_02
    function sub_dq_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_dq(a(i,j), b)
        end do
      end do
    end function sub_dq_20

    function sub_dq_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_dq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_dq_3
    function sub_dq_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_dq(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_dq_03
    function sub_dq_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_dq(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_dq_30

    function sub_dq_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_dq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_dq_4
    function sub_dq_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_dq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_dq_04
    function sub_dq_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_dq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_dq_40
    
    function sub_az_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_az(a(i), b(i))
      end do
    end function sub_az_1
    function sub_az_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_az(a, b(i))
      end do
    end function sub_az_01
    function sub_az_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_az(a(i), b)
      end do
    end function sub_az_10

    function sub_az_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_az(a(i,j), b(i,j))
        end do
      end do
    end function sub_az_2
    function sub_az_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_az(a, b(i,j))
        end do
      end do
    end function sub_az_02
    function sub_az_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_az(a(i,j), b)
        end do
      end do
    end function sub_az_20

    function sub_az_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_az(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_az_3
    function sub_az_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_az(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_az_03
    function sub_az_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_az(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_az_30

    function sub_az_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_az(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_az_4
    function sub_az_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_az(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_az_04
    function sub_az_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_az(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_az_40
    
    function sub_bz_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_bz(a(i), b(i))
      end do
    end function sub_bz_1
    function sub_bz_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_bz(a, b(i))
      end do
    end function sub_bz_01
    function sub_bz_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_bz(a(i), b)
      end do
    end function sub_bz_10

    function sub_bz_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_bz(a(i,j), b(i,j))
        end do
      end do
    end function sub_bz_2
    function sub_bz_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_bz(a, b(i,j))
        end do
      end do
    end function sub_bz_02
    function sub_bz_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_bz(a(i,j), b)
        end do
      end do
    end function sub_bz_20

    function sub_bz_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_bz(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_bz_3
    function sub_bz_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_bz(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_bz_03
    function sub_bz_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_bz(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_bz_30

    function sub_bz_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_bz(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_bz_4
    function sub_bz_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_bz(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_bz_04
    function sub_bz_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_bz(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_bz_40
    
    function sub_qz_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_qz(a(i), b(i))
      end do
    end function sub_qz_1
    function sub_qz_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_qz(a, b(i))
      end do
    end function sub_qz_01
    function sub_qz_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_qz(a(i), b)
      end do
    end function sub_qz_10

    function sub_qz_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_qz(a(i,j), b(i,j))
        end do
      end do
    end function sub_qz_2
    function sub_qz_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_qz(a, b(i,j))
        end do
      end do
    end function sub_qz_02
    function sub_qz_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_qz(a(i,j), b)
        end do
      end do
    end function sub_qz_20

    function sub_qz_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_qz(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_qz_3
    function sub_qz_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_qz(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_qz_03
    function sub_qz_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_qz(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_qz_30

    function sub_qz_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_qz(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_qz_4
    function sub_qz_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_qz(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_qz_04
    function sub_qz_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_qz(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_qz_40
    
    function sub_za_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_za(a(i), b(i))
      end do
    end function sub_za_1
    function sub_za_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_za(a, b(i))
      end do
    end function sub_za_01
    function sub_za_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_za(a(i), b)
      end do
    end function sub_za_10

    function sub_za_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_za(a(i,j), b(i,j))
        end do
      end do
    end function sub_za_2
    function sub_za_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_za(a, b(i,j))
        end do
      end do
    end function sub_za_02
    function sub_za_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_za(a(i,j), b)
        end do
      end do
    end function sub_za_20

    function sub_za_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_za(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_za_3
    function sub_za_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_za(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_za_03
    function sub_za_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_za(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_za_30

    function sub_za_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_za(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_za_4
    function sub_za_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_za(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_za_04
    function sub_za_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_za(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_za_40
    
    function sub_zb_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_zb(a(i), b(i))
      end do
    end function sub_zb_1
    function sub_zb_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_zb(a, b(i))
      end do
    end function sub_zb_01
    function sub_zb_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_zb(a(i), b)
      end do
    end function sub_zb_10

    function sub_zb_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_zb(a(i,j), b(i,j))
        end do
      end do
    end function sub_zb_2
    function sub_zb_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_zb(a, b(i,j))
        end do
      end do
    end function sub_zb_02
    function sub_zb_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_zb(a(i,j), b)
        end do
      end do
    end function sub_zb_20

    function sub_zb_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_zb(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_zb_3
    function sub_zb_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_zb(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_zb_03
    function sub_zb_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_zb(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_zb_30

    function sub_zb_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_zb(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_zb_4
    function sub_zb_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_zb(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_zb_04
    function sub_zb_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_zb(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_zb_40
    
    function sub_zq_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_zq(a(i), b(i))
      end do
    end function sub_zq_1
    function sub_zq_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = sub_zq(a, b(i))
      end do
    end function sub_zq_01
    function sub_zq_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sub_zq(a(i), b)
      end do
    end function sub_zq_10

    function sub_zq_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_zq(a(i,j), b(i,j))
        end do
      end do
    end function sub_zq_2
    function sub_zq_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = sub_zq(a, b(i,j))
        end do
      end do
    end function sub_zq_02
    function sub_zq_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sub_zq(a(i,j), b)
        end do
      end do
    end function sub_zq_20

    function sub_zq_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_zq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function sub_zq_3
    function sub_zq_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = sub_zq(a, b(i,j,k))
          end do
        end do
      end do
    end function sub_zq_03
    function sub_zq_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sub_zq(a(i,j,k), b)
          end do
        end do
      end do
    end function sub_zq_30

    function sub_zq_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_zq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_zq_4
    function sub_zq_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = sub_zq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sub_zq_04
    function sub_zq_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sub_zq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function sub_zq_40
    
  
    function mul_aa_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_aa(a(i), b(i))
      end do
    end function mul_aa_1
    function mul_aa_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_aa(a, b(i))
      end do
    end function mul_aa_01
    function mul_aa_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_aa(a(i), b)
      end do
    end function mul_aa_10

    function mul_aa_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_aa(a(i,j), b(i,j))
        end do
      end do
    end function mul_aa_2
    function mul_aa_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_aa(a, b(i,j))
        end do
      end do
    end function mul_aa_02
    function mul_aa_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_aa(a(i,j), b)
        end do
      end do
    end function mul_aa_20

    function mul_aa_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_aa(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_aa_3
    function mul_aa_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_aa(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_aa_03
    function mul_aa_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_aa(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_aa_30

    function mul_aa_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_aa(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_aa_4
    function mul_aa_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_aa(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_aa_04
    function mul_aa_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_aa(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_aa_40
    
    function mul_bb_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_bb(a(i), b(i))
      end do
    end function mul_bb_1
    function mul_bb_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_bb(a, b(i))
      end do
    end function mul_bb_01
    function mul_bb_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_bb(a(i), b)
      end do
    end function mul_bb_10

    function mul_bb_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_bb(a(i,j), b(i,j))
        end do
      end do
    end function mul_bb_2
    function mul_bb_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_bb(a, b(i,j))
        end do
      end do
    end function mul_bb_02
    function mul_bb_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_bb(a(i,j), b)
        end do
      end do
    end function mul_bb_20

    function mul_bb_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_bb(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_bb_3
    function mul_bb_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_bb(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_bb_03
    function mul_bb_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_bb(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_bb_30

    function mul_bb_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_bb(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_bb_4
    function mul_bb_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_bb(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_bb_04
    function mul_bb_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_bb(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_bb_40
    
    function mul_qq_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_qq(a(i), b(i))
      end do
    end function mul_qq_1
    function mul_qq_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_qq(a, b(i))
      end do
    end function mul_qq_01
    function mul_qq_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_qq(a(i), b)
      end do
    end function mul_qq_10

    function mul_qq_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_qq(a(i,j), b(i,j))
        end do
      end do
    end function mul_qq_2
    function mul_qq_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_qq(a, b(i,j))
        end do
      end do
    end function mul_qq_02
    function mul_qq_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_qq(a(i,j), b)
        end do
      end do
    end function mul_qq_20

    function mul_qq_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_qq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_qq_3
    function mul_qq_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_qq(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_qq_03
    function mul_qq_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_qq(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_qq_30

    function mul_qq_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_qq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_qq_4
    function mul_qq_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_qq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_qq_04
    function mul_qq_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_qq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_qq_40
    
    function mul_ab_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ab(a(i), b(i))
      end do
    end function mul_ab_1
    function mul_ab_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_ab(a, b(i))
      end do
    end function mul_ab_01
    function mul_ab_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ab(a(i), b)
      end do
    end function mul_ab_10

    function mul_ab_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ab(a(i,j), b(i,j))
        end do
      end do
    end function mul_ab_2
    function mul_ab_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_ab(a, b(i,j))
        end do
      end do
    end function mul_ab_02
    function mul_ab_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ab(a(i,j), b)
        end do
      end do
    end function mul_ab_20

    function mul_ab_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ab(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_ab_3
    function mul_ab_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_ab(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_ab_03
    function mul_ab_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ab(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_ab_30

    function mul_ab_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ab(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ab_4
    function mul_ab_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_ab(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ab_04
    function mul_ab_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ab(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_ab_40
    
    function mul_ba_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ba(a(i), b(i))
      end do
    end function mul_ba_1
    function mul_ba_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_ba(a, b(i))
      end do
    end function mul_ba_01
    function mul_ba_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ba(a(i), b)
      end do
    end function mul_ba_10

    function mul_ba_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ba(a(i,j), b(i,j))
        end do
      end do
    end function mul_ba_2
    function mul_ba_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_ba(a, b(i,j))
        end do
      end do
    end function mul_ba_02
    function mul_ba_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ba(a(i,j), b)
        end do
      end do
    end function mul_ba_20

    function mul_ba_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ba(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_ba_3
    function mul_ba_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_ba(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_ba_03
    function mul_ba_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ba(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_ba_30

    function mul_ba_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ba(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ba_4
    function mul_ba_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_ba(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ba_04
    function mul_ba_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ba(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_ba_40
    
    function mul_ai_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ai(a(i), b(i))
      end do
    end function mul_ai_1
    function mul_ai_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_ai(a, b(i))
      end do
    end function mul_ai_01
    function mul_ai_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ai(a(i), b)
      end do
    end function mul_ai_10

    function mul_ai_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ai(a(i,j), b(i,j))
        end do
      end do
    end function mul_ai_2
    function mul_ai_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_ai(a, b(i,j))
        end do
      end do
    end function mul_ai_02
    function mul_ai_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ai(a(i,j), b)
        end do
      end do
    end function mul_ai_20

    function mul_ai_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ai(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_ai_3
    function mul_ai_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_ai(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_ai_03
    function mul_ai_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ai(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_ai_30

    function mul_ai_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ai(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ai_4
    function mul_ai_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_ai(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ai_04
    function mul_ai_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ai(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_ai_40
    
    function mul_bi_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_bi(a(i), b(i))
      end do
    end function mul_bi_1
    function mul_bi_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_bi(a, b(i))
      end do
    end function mul_bi_01
    function mul_bi_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_bi(a(i), b)
      end do
    end function mul_bi_10

    function mul_bi_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_bi(a(i,j), b(i,j))
        end do
      end do
    end function mul_bi_2
    function mul_bi_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_bi(a, b(i,j))
        end do
      end do
    end function mul_bi_02
    function mul_bi_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_bi(a(i,j), b)
        end do
      end do
    end function mul_bi_20

    function mul_bi_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_bi(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_bi_3
    function mul_bi_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_bi(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_bi_03
    function mul_bi_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_bi(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_bi_30

    function mul_bi_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_bi(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_bi_4
    function mul_bi_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_bi(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_bi_04
    function mul_bi_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_bi(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_bi_40
    
    function mul_qi_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_qi(a(i), b(i))
      end do
    end function mul_qi_1
    function mul_qi_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_qi(a, b(i))
      end do
    end function mul_qi_01
    function mul_qi_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_qi(a(i), b)
      end do
    end function mul_qi_10

    function mul_qi_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_qi(a(i,j), b(i,j))
        end do
      end do
    end function mul_qi_2
    function mul_qi_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_qi(a, b(i,j))
        end do
      end do
    end function mul_qi_02
    function mul_qi_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_qi(a(i,j), b)
        end do
      end do
    end function mul_qi_20

    function mul_qi_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_qi(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_qi_3
    function mul_qi_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_qi(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_qi_03
    function mul_qi_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_qi(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_qi_30

    function mul_qi_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_qi(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_qi_4
    function mul_qi_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_qi(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_qi_04
    function mul_qi_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_qi(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_qi_40
    
    function mul_ia_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ia(a(i), b(i))
      end do
    end function mul_ia_1
    function mul_ia_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_ia(a, b(i))
      end do
    end function mul_ia_01
    function mul_ia_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ia(a(i), b)
      end do
    end function mul_ia_10

    function mul_ia_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ia(a(i,j), b(i,j))
        end do
      end do
    end function mul_ia_2
    function mul_ia_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_ia(a, b(i,j))
        end do
      end do
    end function mul_ia_02
    function mul_ia_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ia(a(i,j), b)
        end do
      end do
    end function mul_ia_20

    function mul_ia_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ia(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_ia_3
    function mul_ia_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_ia(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_ia_03
    function mul_ia_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ia(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_ia_30

    function mul_ia_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ia(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ia_4
    function mul_ia_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_ia(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ia_04
    function mul_ia_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ia(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_ia_40
    
    function mul_ib_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ib(a(i), b(i))
      end do
    end function mul_ib_1
    function mul_ib_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_ib(a, b(i))
      end do
    end function mul_ib_01
    function mul_ib_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ib(a(i), b)
      end do
    end function mul_ib_10

    function mul_ib_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ib(a(i,j), b(i,j))
        end do
      end do
    end function mul_ib_2
    function mul_ib_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_ib(a, b(i,j))
        end do
      end do
    end function mul_ib_02
    function mul_ib_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ib(a(i,j), b)
        end do
      end do
    end function mul_ib_20

    function mul_ib_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ib(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_ib_3
    function mul_ib_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_ib(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_ib_03
    function mul_ib_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ib(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_ib_30

    function mul_ib_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ib(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ib_4
    function mul_ib_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_ib(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ib_04
    function mul_ib_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ib(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_ib_40
    
    function mul_iq_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_iq(a(i), b(i))
      end do
    end function mul_iq_1
    function mul_iq_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_iq(a, b(i))
      end do
    end function mul_iq_01
    function mul_iq_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_iq(a(i), b)
      end do
    end function mul_iq_10

    function mul_iq_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_iq(a(i,j), b(i,j))
        end do
      end do
    end function mul_iq_2
    function mul_iq_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_iq(a, b(i,j))
        end do
      end do
    end function mul_iq_02
    function mul_iq_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_iq(a(i,j), b)
        end do
      end do
    end function mul_iq_20

    function mul_iq_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_iq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_iq_3
    function mul_iq_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_iq(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_iq_03
    function mul_iq_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_iq(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_iq_30

    function mul_iq_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_iq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_iq_4
    function mul_iq_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_iq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_iq_04
    function mul_iq_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_iq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_iq_40
    
    function mul_ad_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ad(a(i), b(i))
      end do
    end function mul_ad_1
    function mul_ad_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_ad(a, b(i))
      end do
    end function mul_ad_01
    function mul_ad_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_ad(a(i), b)
      end do
    end function mul_ad_10

    function mul_ad_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ad(a(i,j), b(i,j))
        end do
      end do
    end function mul_ad_2
    function mul_ad_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_ad(a, b(i,j))
        end do
      end do
    end function mul_ad_02
    function mul_ad_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_ad(a(i,j), b)
        end do
      end do
    end function mul_ad_20

    function mul_ad_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ad(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_ad_3
    function mul_ad_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_ad(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_ad_03
    function mul_ad_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_ad(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_ad_30

    function mul_ad_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ad(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ad_4
    function mul_ad_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_ad(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_ad_04
    function mul_ad_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_ad(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_ad_40
    
    function mul_bd_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_bd(a(i), b(i))
      end do
    end function mul_bd_1
    function mul_bd_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_bd(a, b(i))
      end do
    end function mul_bd_01
    function mul_bd_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_bd(a(i), b)
      end do
    end function mul_bd_10

    function mul_bd_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_bd(a(i,j), b(i,j))
        end do
      end do
    end function mul_bd_2
    function mul_bd_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_bd(a, b(i,j))
        end do
      end do
    end function mul_bd_02
    function mul_bd_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_bd(a(i,j), b)
        end do
      end do
    end function mul_bd_20

    function mul_bd_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_bd(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_bd_3
    function mul_bd_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_bd(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_bd_03
    function mul_bd_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_bd(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_bd_30

    function mul_bd_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_bd(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_bd_4
    function mul_bd_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_bd(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_bd_04
    function mul_bd_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_bd(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_bd_40
    
    function mul_qd_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_qd(a(i), b(i))
      end do
    end function mul_qd_1
    function mul_qd_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_qd(a, b(i))
      end do
    end function mul_qd_01
    function mul_qd_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_qd(a(i), b)
      end do
    end function mul_qd_10

    function mul_qd_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_qd(a(i,j), b(i,j))
        end do
      end do
    end function mul_qd_2
    function mul_qd_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_qd(a, b(i,j))
        end do
      end do
    end function mul_qd_02
    function mul_qd_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_qd(a(i,j), b)
        end do
      end do
    end function mul_qd_20

    function mul_qd_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_qd(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_qd_3
    function mul_qd_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_qd(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_qd_03
    function mul_qd_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_qd(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_qd_30

    function mul_qd_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_qd(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_qd_4
    function mul_qd_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_qd(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_qd_04
    function mul_qd_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_qd(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_qd_40
    
    function mul_da_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_da(a(i), b(i))
      end do
    end function mul_da_1
    function mul_da_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_da(a, b(i))
      end do
    end function mul_da_01
    function mul_da_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_da(a(i), b)
      end do
    end function mul_da_10

    function mul_da_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_da(a(i,j), b(i,j))
        end do
      end do
    end function mul_da_2
    function mul_da_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_da(a, b(i,j))
        end do
      end do
    end function mul_da_02
    function mul_da_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_da(a(i,j), b)
        end do
      end do
    end function mul_da_20

    function mul_da_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_da(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_da_3
    function mul_da_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_da(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_da_03
    function mul_da_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_da(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_da_30

    function mul_da_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_da(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_da_4
    function mul_da_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_da(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_da_04
    function mul_da_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_da(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_da_40
    
    function mul_db_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_db(a(i), b(i))
      end do
    end function mul_db_1
    function mul_db_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_db(a, b(i))
      end do
    end function mul_db_01
    function mul_db_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_db(a(i), b)
      end do
    end function mul_db_10

    function mul_db_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_db(a(i,j), b(i,j))
        end do
      end do
    end function mul_db_2
    function mul_db_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_db(a, b(i,j))
        end do
      end do
    end function mul_db_02
    function mul_db_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_db(a(i,j), b)
        end do
      end do
    end function mul_db_20

    function mul_db_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_db(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_db_3
    function mul_db_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_db(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_db_03
    function mul_db_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_db(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_db_30

    function mul_db_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_db(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_db_4
    function mul_db_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_db(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_db_04
    function mul_db_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_db(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_db_40
    
    function mul_dq_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_dq(a(i), b(i))
      end do
    end function mul_dq_1
    function mul_dq_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_dq(a, b(i))
      end do
    end function mul_dq_01
    function mul_dq_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_dq(a(i), b)
      end do
    end function mul_dq_10

    function mul_dq_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_dq(a(i,j), b(i,j))
        end do
      end do
    end function mul_dq_2
    function mul_dq_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_dq(a, b(i,j))
        end do
      end do
    end function mul_dq_02
    function mul_dq_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_dq(a(i,j), b)
        end do
      end do
    end function mul_dq_20

    function mul_dq_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_dq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_dq_3
    function mul_dq_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_dq(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_dq_03
    function mul_dq_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_dq(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_dq_30

    function mul_dq_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_dq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_dq_4
    function mul_dq_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_dq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_dq_04
    function mul_dq_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_dq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_dq_40
    
    function mul_az_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_az(a(i), b(i))
      end do
    end function mul_az_1
    function mul_az_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_az(a, b(i))
      end do
    end function mul_az_01
    function mul_az_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_az(a(i), b)
      end do
    end function mul_az_10

    function mul_az_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_az(a(i,j), b(i,j))
        end do
      end do
    end function mul_az_2
    function mul_az_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_az(a, b(i,j))
        end do
      end do
    end function mul_az_02
    function mul_az_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_az(a(i,j), b)
        end do
      end do
    end function mul_az_20

    function mul_az_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_az(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_az_3
    function mul_az_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_az(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_az_03
    function mul_az_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_az(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_az_30

    function mul_az_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_az(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_az_4
    function mul_az_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_az(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_az_04
    function mul_az_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_az(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_az_40
    
    function mul_bz_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_bz(a(i), b(i))
      end do
    end function mul_bz_1
    function mul_bz_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_bz(a, b(i))
      end do
    end function mul_bz_01
    function mul_bz_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_bz(a(i), b)
      end do
    end function mul_bz_10

    function mul_bz_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_bz(a(i,j), b(i,j))
        end do
      end do
    end function mul_bz_2
    function mul_bz_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_bz(a, b(i,j))
        end do
      end do
    end function mul_bz_02
    function mul_bz_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_bz(a(i,j), b)
        end do
      end do
    end function mul_bz_20

    function mul_bz_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_bz(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_bz_3
    function mul_bz_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_bz(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_bz_03
    function mul_bz_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_bz(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_bz_30

    function mul_bz_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_bz(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_bz_4
    function mul_bz_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_bz(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_bz_04
    function mul_bz_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_bz(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_bz_40
    
    function mul_qz_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_qz(a(i), b(i))
      end do
    end function mul_qz_1
    function mul_qz_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_qz(a, b(i))
      end do
    end function mul_qz_01
    function mul_qz_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_qz(a(i), b)
      end do
    end function mul_qz_10

    function mul_qz_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_qz(a(i,j), b(i,j))
        end do
      end do
    end function mul_qz_2
    function mul_qz_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_qz(a, b(i,j))
        end do
      end do
    end function mul_qz_02
    function mul_qz_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_qz(a(i,j), b)
        end do
      end do
    end function mul_qz_20

    function mul_qz_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_qz(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_qz_3
    function mul_qz_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_qz(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_qz_03
    function mul_qz_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_qz(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_qz_30

    function mul_qz_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_qz(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_qz_4
    function mul_qz_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_qz(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_qz_04
    function mul_qz_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_qz(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_qz_40
    
    function mul_za_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_za(a(i), b(i))
      end do
    end function mul_za_1
    function mul_za_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_za(a, b(i))
      end do
    end function mul_za_01
    function mul_za_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_za(a(i), b)
      end do
    end function mul_za_10

    function mul_za_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_za(a(i,j), b(i,j))
        end do
      end do
    end function mul_za_2
    function mul_za_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_za(a, b(i,j))
        end do
      end do
    end function mul_za_02
    function mul_za_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_za(a(i,j), b)
        end do
      end do
    end function mul_za_20

    function mul_za_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_za(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_za_3
    function mul_za_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_za(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_za_03
    function mul_za_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_za(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_za_30

    function mul_za_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_za(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_za_4
    function mul_za_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_za(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_za_04
    function mul_za_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_za(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_za_40
    
    function mul_zb_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_zb(a(i), b(i))
      end do
    end function mul_zb_1
    function mul_zb_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_zb(a, b(i))
      end do
    end function mul_zb_01
    function mul_zb_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_zb(a(i), b)
      end do
    end function mul_zb_10

    function mul_zb_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_zb(a(i,j), b(i,j))
        end do
      end do
    end function mul_zb_2
    function mul_zb_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_zb(a, b(i,j))
        end do
      end do
    end function mul_zb_02
    function mul_zb_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_zb(a(i,j), b)
        end do
      end do
    end function mul_zb_20

    function mul_zb_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_zb(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_zb_3
    function mul_zb_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_zb(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_zb_03
    function mul_zb_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_zb(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_zb_30

    function mul_zb_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_zb(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_zb_4
    function mul_zb_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_zb(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_zb_04
    function mul_zb_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_zb(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_zb_40
    
    function mul_zq_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_zq(a(i), b(i))
      end do
    end function mul_zq_1
    function mul_zq_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = mul_zq(a, b(i))
      end do
    end function mul_zq_01
    function mul_zq_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = mul_zq(a(i), b)
      end do
    end function mul_zq_10

    function mul_zq_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_zq(a(i,j), b(i,j))
        end do
      end do
    end function mul_zq_2
    function mul_zq_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = mul_zq(a, b(i,j))
        end do
      end do
    end function mul_zq_02
    function mul_zq_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = mul_zq(a(i,j), b)
        end do
      end do
    end function mul_zq_20

    function mul_zq_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_zq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function mul_zq_3
    function mul_zq_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = mul_zq(a, b(i,j,k))
          end do
        end do
      end do
    end function mul_zq_03
    function mul_zq_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = mul_zq(a(i,j,k), b)
          end do
        end do
      end do
    end function mul_zq_30

    function mul_zq_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_zq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_zq_4
    function mul_zq_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = mul_zq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function mul_zq_04
    function mul_zq_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = mul_zq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function mul_zq_40
    
  
    function div_aa_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_aa(a(i), b(i))
      end do
    end function div_aa_1
    function div_aa_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_aa(a, b(i))
      end do
    end function div_aa_01
    function div_aa_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_aa(a(i), b)
      end do
    end function div_aa_10

    function div_aa_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_aa(a(i,j), b(i,j))
        end do
      end do
    end function div_aa_2
    function div_aa_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_aa(a, b(i,j))
        end do
      end do
    end function div_aa_02
    function div_aa_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_aa(a(i,j), b)
        end do
      end do
    end function div_aa_20

    function div_aa_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_aa(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_aa_3
    function div_aa_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_aa(a, b(i,j,k))
          end do
        end do
      end do
    end function div_aa_03
    function div_aa_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_aa(a(i,j,k), b)
          end do
        end do
      end do
    end function div_aa_30

    function div_aa_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_aa(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_aa_4
    function div_aa_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_aa(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_aa_04
    function div_aa_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_aa(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_aa_40
    
    function div_bb_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_bb(a(i), b(i))
      end do
    end function div_bb_1
    function div_bb_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_bb(a, b(i))
      end do
    end function div_bb_01
    function div_bb_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_bb(a(i), b)
      end do
    end function div_bb_10

    function div_bb_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_bb(a(i,j), b(i,j))
        end do
      end do
    end function div_bb_2
    function div_bb_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_bb(a, b(i,j))
        end do
      end do
    end function div_bb_02
    function div_bb_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_bb(a(i,j), b)
        end do
      end do
    end function div_bb_20

    function div_bb_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_bb(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_bb_3
    function div_bb_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_bb(a, b(i,j,k))
          end do
        end do
      end do
    end function div_bb_03
    function div_bb_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_bb(a(i,j,k), b)
          end do
        end do
      end do
    end function div_bb_30

    function div_bb_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_bb(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_bb_4
    function div_bb_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_bb(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_bb_04
    function div_bb_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_bb(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_bb_40
    
    function div_qq_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_qq(a(i), b(i))
      end do
    end function div_qq_1
    function div_qq_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_qq(a, b(i))
      end do
    end function div_qq_01
    function div_qq_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_qq(a(i), b)
      end do
    end function div_qq_10

    function div_qq_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_qq(a(i,j), b(i,j))
        end do
      end do
    end function div_qq_2
    function div_qq_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_qq(a, b(i,j))
        end do
      end do
    end function div_qq_02
    function div_qq_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_qq(a(i,j), b)
        end do
      end do
    end function div_qq_20

    function div_qq_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_qq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_qq_3
    function div_qq_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_qq(a, b(i,j,k))
          end do
        end do
      end do
    end function div_qq_03
    function div_qq_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_qq(a(i,j,k), b)
          end do
        end do
      end do
    end function div_qq_30

    function div_qq_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_qq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_qq_4
    function div_qq_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_qq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_qq_04
    function div_qq_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_qq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_qq_40
    
    function div_ab_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ab(a(i), b(i))
      end do
    end function div_ab_1
    function div_ab_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_ab(a, b(i))
      end do
    end function div_ab_01
    function div_ab_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ab(a(i), b)
      end do
    end function div_ab_10

    function div_ab_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ab(a(i,j), b(i,j))
        end do
      end do
    end function div_ab_2
    function div_ab_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_ab(a, b(i,j))
        end do
      end do
    end function div_ab_02
    function div_ab_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ab(a(i,j), b)
        end do
      end do
    end function div_ab_20

    function div_ab_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ab(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_ab_3
    function div_ab_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_ab(a, b(i,j,k))
          end do
        end do
      end do
    end function div_ab_03
    function div_ab_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ab(a(i,j,k), b)
          end do
        end do
      end do
    end function div_ab_30

    function div_ab_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ab(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ab_4
    function div_ab_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_ab(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ab_04
    function div_ab_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ab(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_ab_40
    
    function div_ba_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ba(a(i), b(i))
      end do
    end function div_ba_1
    function div_ba_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_ba(a, b(i))
      end do
    end function div_ba_01
    function div_ba_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ba(a(i), b)
      end do
    end function div_ba_10

    function div_ba_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ba(a(i,j), b(i,j))
        end do
      end do
    end function div_ba_2
    function div_ba_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_ba(a, b(i,j))
        end do
      end do
    end function div_ba_02
    function div_ba_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ba(a(i,j), b)
        end do
      end do
    end function div_ba_20

    function div_ba_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ba(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_ba_3
    function div_ba_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_ba(a, b(i,j,k))
          end do
        end do
      end do
    end function div_ba_03
    function div_ba_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ba(a(i,j,k), b)
          end do
        end do
      end do
    end function div_ba_30

    function div_ba_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ba(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ba_4
    function div_ba_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_ba(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ba_04
    function div_ba_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ba(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_ba_40
    
    function div_ai_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ai(a(i), b(i))
      end do
    end function div_ai_1
    function div_ai_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_ai(a, b(i))
      end do
    end function div_ai_01
    function div_ai_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ai(a(i), b)
      end do
    end function div_ai_10

    function div_ai_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ai(a(i,j), b(i,j))
        end do
      end do
    end function div_ai_2
    function div_ai_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_ai(a, b(i,j))
        end do
      end do
    end function div_ai_02
    function div_ai_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ai(a(i,j), b)
        end do
      end do
    end function div_ai_20

    function div_ai_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ai(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_ai_3
    function div_ai_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_ai(a, b(i,j,k))
          end do
        end do
      end do
    end function div_ai_03
    function div_ai_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ai(a(i,j,k), b)
          end do
        end do
      end do
    end function div_ai_30

    function div_ai_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ai(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ai_4
    function div_ai_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_ai(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ai_04
    function div_ai_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ai(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_ai_40
    
    function div_bi_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_bi(a(i), b(i))
      end do
    end function div_bi_1
    function div_bi_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_bi(a, b(i))
      end do
    end function div_bi_01
    function div_bi_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_bi(a(i), b)
      end do
    end function div_bi_10

    function div_bi_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_bi(a(i,j), b(i,j))
        end do
      end do
    end function div_bi_2
    function div_bi_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_bi(a, b(i,j))
        end do
      end do
    end function div_bi_02
    function div_bi_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_bi(a(i,j), b)
        end do
      end do
    end function div_bi_20

    function div_bi_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_bi(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_bi_3
    function div_bi_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_bi(a, b(i,j,k))
          end do
        end do
      end do
    end function div_bi_03
    function div_bi_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_bi(a(i,j,k), b)
          end do
        end do
      end do
    end function div_bi_30

    function div_bi_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_bi(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_bi_4
    function div_bi_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_bi(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_bi_04
    function div_bi_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_bi(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_bi_40
    
    function div_qi_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_qi(a(i), b(i))
      end do
    end function div_qi_1
    function div_qi_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_qi(a, b(i))
      end do
    end function div_qi_01
    function div_qi_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_qi(a(i), b)
      end do
    end function div_qi_10

    function div_qi_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_qi(a(i,j), b(i,j))
        end do
      end do
    end function div_qi_2
    function div_qi_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_qi(a, b(i,j))
        end do
      end do
    end function div_qi_02
    function div_qi_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_qi(a(i,j), b)
        end do
      end do
    end function div_qi_20

    function div_qi_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_qi(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_qi_3
    function div_qi_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_qi(a, b(i,j,k))
          end do
        end do
      end do
    end function div_qi_03
    function div_qi_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_qi(a(i,j,k), b)
          end do
        end do
      end do
    end function div_qi_30

    function div_qi_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_qi(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_qi_4
    function div_qi_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_qi(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_qi_04
    function div_qi_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_qi(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_qi_40
    
    function div_ia_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ia(a(i), b(i))
      end do
    end function div_ia_1
    function div_ia_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_ia(a, b(i))
      end do
    end function div_ia_01
    function div_ia_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ia(a(i), b)
      end do
    end function div_ia_10

    function div_ia_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ia(a(i,j), b(i,j))
        end do
      end do
    end function div_ia_2
    function div_ia_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_ia(a, b(i,j))
        end do
      end do
    end function div_ia_02
    function div_ia_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ia(a(i,j), b)
        end do
      end do
    end function div_ia_20

    function div_ia_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ia(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_ia_3
    function div_ia_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_ia(a, b(i,j,k))
          end do
        end do
      end do
    end function div_ia_03
    function div_ia_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ia(a(i,j,k), b)
          end do
        end do
      end do
    end function div_ia_30

    function div_ia_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ia(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ia_4
    function div_ia_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_ia(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ia_04
    function div_ia_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ia(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_ia_40
    
    function div_ib_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ib(a(i), b(i))
      end do
    end function div_ib_1
    function div_ib_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_ib(a, b(i))
      end do
    end function div_ib_01
    function div_ib_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ib(a(i), b)
      end do
    end function div_ib_10

    function div_ib_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ib(a(i,j), b(i,j))
        end do
      end do
    end function div_ib_2
    function div_ib_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_ib(a, b(i,j))
        end do
      end do
    end function div_ib_02
    function div_ib_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ib(a(i,j), b)
        end do
      end do
    end function div_ib_20

    function div_ib_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ib(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_ib_3
    function div_ib_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_ib(a, b(i,j,k))
          end do
        end do
      end do
    end function div_ib_03
    function div_ib_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ib(a(i,j,k), b)
          end do
        end do
      end do
    end function div_ib_30

    function div_ib_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ib(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ib_4
    function div_ib_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_ib(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ib_04
    function div_ib_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ib(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_ib_40
    
    function div_iq_1(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_iq(a(i), b(i))
      end do
    end function div_iq_1
    function div_iq_01(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_iq(a, b(i))
      end do
    end function div_iq_01
    function div_iq_10(a, b) result(c)
      implicit none
      integer, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_iq(a(i), b)
      end do
    end function div_iq_10

    function div_iq_2(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_iq(a(i,j), b(i,j))
        end do
      end do
    end function div_iq_2
    function div_iq_02(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_iq(a, b(i,j))
        end do
      end do
    end function div_iq_02
    function div_iq_20(a, b) result(c)
      implicit none
      integer, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_iq(a(i,j), b)
        end do
      end do
    end function div_iq_20

    function div_iq_3(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_iq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_iq_3
    function div_iq_03(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_iq(a, b(i,j,k))
          end do
        end do
      end do
    end function div_iq_03
    function div_iq_30(a, b) result(c)
      implicit none
      integer, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_iq(a(i,j,k), b)
          end do
        end do
      end do
    end function div_iq_30

    function div_iq_4(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_iq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_iq_4
    function div_iq_04(a, b) result(c)
      implicit none
      integer, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_iq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_iq_04
    function div_iq_40(a, b) result(c)
      implicit none
      integer, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_iq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_iq_40
    
    function div_ad_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ad(a(i), b(i))
      end do
    end function div_ad_1
    function div_ad_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_ad(a, b(i))
      end do
    end function div_ad_01
    function div_ad_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_ad(a(i), b)
      end do
    end function div_ad_10

    function div_ad_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ad(a(i,j), b(i,j))
        end do
      end do
    end function div_ad_2
    function div_ad_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_ad(a, b(i,j))
        end do
      end do
    end function div_ad_02
    function div_ad_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_ad(a(i,j), b)
        end do
      end do
    end function div_ad_20

    function div_ad_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ad(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_ad_3
    function div_ad_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_ad(a, b(i,j,k))
          end do
        end do
      end do
    end function div_ad_03
    function div_ad_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_ad(a(i,j,k), b)
          end do
        end do
      end do
    end function div_ad_30

    function div_ad_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ad(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ad_4
    function div_ad_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_ad(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_ad_04
    function div_ad_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_ad(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_ad_40
    
    function div_bd_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_bd(a(i), b(i))
      end do
    end function div_bd_1
    function div_bd_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_bd(a, b(i))
      end do
    end function div_bd_01
    function div_bd_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_bd(a(i), b)
      end do
    end function div_bd_10

    function div_bd_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_bd(a(i,j), b(i,j))
        end do
      end do
    end function div_bd_2
    function div_bd_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_bd(a, b(i,j))
        end do
      end do
    end function div_bd_02
    function div_bd_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_bd(a(i,j), b)
        end do
      end do
    end function div_bd_20

    function div_bd_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_bd(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_bd_3
    function div_bd_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_bd(a, b(i,j,k))
          end do
        end do
      end do
    end function div_bd_03
    function div_bd_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_bd(a(i,j,k), b)
          end do
        end do
      end do
    end function div_bd_30

    function div_bd_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_bd(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_bd_4
    function div_bd_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_bd(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_bd_04
    function div_bd_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_bd(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_bd_40
    
    function div_qd_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_qd(a(i), b(i))
      end do
    end function div_qd_1
    function div_qd_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_qd(a, b(i))
      end do
    end function div_qd_01
    function div_qd_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_qd(a(i), b)
      end do
    end function div_qd_10

    function div_qd_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_qd(a(i,j), b(i,j))
        end do
      end do
    end function div_qd_2
    function div_qd_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_qd(a, b(i,j))
        end do
      end do
    end function div_qd_02
    function div_qd_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_qd(a(i,j), b)
        end do
      end do
    end function div_qd_20

    function div_qd_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_qd(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_qd_3
    function div_qd_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_qd(a, b(i,j,k))
          end do
        end do
      end do
    end function div_qd_03
    function div_qd_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_qd(a(i,j,k), b)
          end do
        end do
      end do
    end function div_qd_30

    function div_qd_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_qd(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_qd_4
    function div_qd_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_qd(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_qd_04
    function div_qd_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_qd(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_qd_40
    
    function div_da_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_da(a(i), b(i))
      end do
    end function div_da_1
    function div_da_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_da(a, b(i))
      end do
    end function div_da_01
    function div_da_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_da(a(i), b)
      end do
    end function div_da_10

    function div_da_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_da(a(i,j), b(i,j))
        end do
      end do
    end function div_da_2
    function div_da_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_da(a, b(i,j))
        end do
      end do
    end function div_da_02
    function div_da_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_da(a(i,j), b)
        end do
      end do
    end function div_da_20

    function div_da_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_da(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_da_3
    function div_da_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_da(a, b(i,j,k))
          end do
        end do
      end do
    end function div_da_03
    function div_da_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_da(a(i,j,k), b)
          end do
        end do
      end do
    end function div_da_30

    function div_da_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_da(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_da_4
    function div_da_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_da(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_da_04
    function div_da_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_da(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_da_40
    
    function div_db_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_db(a(i), b(i))
      end do
    end function div_db_1
    function div_db_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_db(a, b(i))
      end do
    end function div_db_01
    function div_db_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_db(a(i), b)
      end do
    end function div_db_10

    function div_db_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_db(a(i,j), b(i,j))
        end do
      end do
    end function div_db_2
    function div_db_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_db(a, b(i,j))
        end do
      end do
    end function div_db_02
    function div_db_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_db(a(i,j), b)
        end do
      end do
    end function div_db_20

    function div_db_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_db(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_db_3
    function div_db_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_db(a, b(i,j,k))
          end do
        end do
      end do
    end function div_db_03
    function div_db_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_db(a(i,j,k), b)
          end do
        end do
      end do
    end function div_db_30

    function div_db_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_db(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_db_4
    function div_db_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_db(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_db_04
    function div_db_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_db(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_db_40
    
    function div_dq_1(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_dq(a(i), b(i))
      end do
    end function div_dq_1
    function div_dq_01(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_dq(a, b(i))
      end do
    end function div_dq_01
    function div_dq_10(a, b) result(c)
      implicit none
      double precision, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_dq(a(i), b)
      end do
    end function div_dq_10

    function div_dq_2(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_dq(a(i,j), b(i,j))
        end do
      end do
    end function div_dq_2
    function div_dq_02(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_dq(a, b(i,j))
        end do
      end do
    end function div_dq_02
    function div_dq_20(a, b) result(c)
      implicit none
      double precision, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_dq(a(i,j), b)
        end do
      end do
    end function div_dq_20

    function div_dq_3(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_dq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_dq_3
    function div_dq_03(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_dq(a, b(i,j,k))
          end do
        end do
      end do
    end function div_dq_03
    function div_dq_30(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_dq(a(i,j,k), b)
          end do
        end do
      end do
    end function div_dq_30

    function div_dq_4(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_dq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_dq_4
    function div_dq_04(a, b) result(c)
      implicit none
      double precision, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_dq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_dq_04
    function div_dq_40(a, b) result(c)
      implicit none
      double precision, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_dq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_dq_40
    
    function div_az_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_az(a(i), b(i))
      end do
    end function div_az_1
    function div_az_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_az(a, b(i))
      end do
    end function div_az_01
    function div_az_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_az(a(i), b)
      end do
    end function div_az_10

    function div_az_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_az(a(i,j), b(i,j))
        end do
      end do
    end function div_az_2
    function div_az_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_az(a, b(i,j))
        end do
      end do
    end function div_az_02
    function div_az_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_az(a(i,j), b)
        end do
      end do
    end function div_az_20

    function div_az_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_az(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_az_3
    function div_az_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_az(a, b(i,j,k))
          end do
        end do
      end do
    end function div_az_03
    function div_az_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_az(a(i,j,k), b)
          end do
        end do
      end do
    end function div_az_30

    function div_az_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_az(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_az_4
    function div_az_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_az(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_az_04
    function div_az_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_az(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_az_40
    
    function div_bz_1(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_bz(a(i), b(i))
      end do
    end function div_bz_1
    function div_bz_01(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_bz(a, b(i))
      end do
    end function div_bz_01
    function div_bz_10(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_bz(a(i), b)
      end do
    end function div_bz_10

    function div_bz_2(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_bz(a(i,j), b(i,j))
        end do
      end do
    end function div_bz_2
    function div_bz_02(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_bz(a, b(i,j))
        end do
      end do
    end function div_bz_02
    function div_bz_20(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_bz(a(i,j), b)
        end do
      end do
    end function div_bz_20

    function div_bz_3(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_bz(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_bz_3
    function div_bz_03(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_bz(a, b(i,j,k))
          end do
        end do
      end do
    end function div_bz_03
    function div_bz_30(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_bz(a(i,j,k), b)
          end do
        end do
      end do
    end function div_bz_30

    function div_bz_4(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_bz(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_bz_4
    function div_bz_04(a, b) result(c)
      implicit none
      type(adjac_complex), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_bz(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_bz_04
    function div_bz_40(a, b) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_bz(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_bz_40
    
    function div_qz_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_qz(a(i), b(i))
      end do
    end function div_qz_1
    function div_qz_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_qz(a, b(i))
      end do
    end function div_qz_01
    function div_qz_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_qz(a(i), b)
      end do
    end function div_qz_10

    function div_qz_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_qz(a(i,j), b(i,j))
        end do
      end do
    end function div_qz_2
    function div_qz_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_qz(a, b(i,j))
        end do
      end do
    end function div_qz_02
    function div_qz_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_qz(a(i,j), b)
        end do
      end do
    end function div_qz_20

    function div_qz_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_qz(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_qz_3
    function div_qz_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_qz(a, b(i,j,k))
          end do
        end do
      end do
    end function div_qz_03
    function div_qz_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_qz(a(i,j,k), b)
          end do
        end do
      end do
    end function div_qz_30

    function div_qz_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_qz(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_qz_4
    function div_qz_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_qz(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_qz_04
    function div_qz_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_qz(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_qz_40
    
    function div_za_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_za(a(i), b(i))
      end do
    end function div_za_1
    function div_za_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_za(a, b(i))
      end do
    end function div_za_01
    function div_za_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_za(a(i), b)
      end do
    end function div_za_10

    function div_za_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_za(a(i,j), b(i,j))
        end do
      end do
    end function div_za_2
    function div_za_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_za(a, b(i,j))
        end do
      end do
    end function div_za_02
    function div_za_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_za(a(i,j), b)
        end do
      end do
    end function div_za_20

    function div_za_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_za(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_za_3
    function div_za_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_za(a, b(i,j,k))
          end do
        end do
      end do
    end function div_za_03
    function div_za_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_za(a(i,j,k), b)
          end do
        end do
      end do
    end function div_za_30

    function div_za_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_za(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_za_4
    function div_za_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_double), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_za(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_za_04
    function div_za_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_za(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_za_40
    
    function div_zb_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_zb(a(i), b(i))
      end do
    end function div_zb_1
    function div_zb_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:), intent(in) :: b
      type(adjac_complex), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_zb(a, b(i))
      end do
    end function div_zb_01
    function div_zb_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_zb(a(i), b)
      end do
    end function div_zb_10

    function div_zb_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_zb(a(i,j), b(i,j))
        end do
      end do
    end function div_zb_2
    function div_zb_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_zb(a, b(i,j))
        end do
      end do
    end function div_zb_02
    function div_zb_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_zb(a(i,j), b)
        end do
      end do
    end function div_zb_20

    function div_zb_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_zb(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_zb_3
    function div_zb_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_zb(a, b(i,j,k))
          end do
        end do
      end do
    end function div_zb_03
    function div_zb_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_zb(a(i,j,k), b)
          end do
        end do
      end do
    end function div_zb_30

    function div_zb_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_zb(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_zb_4
    function div_zb_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complex), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_zb(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_zb_04
    function div_zb_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), intent(in) :: b
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_zb(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_zb_40
    
    function div_zq_1(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_zq(a(i), b(i))
      end do
    end function div_zq_1
    function div_zq_01(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = div_zq(a, b(i))
      end do
    end function div_zq_01
    function div_zq_10(a, b) result(c)
      implicit none
      double complex, dimension(:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = div_zq(a(i), b)
      end do
    end function div_zq_10

    function div_zq_2(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_zq(a(i,j), b(i,j))
        end do
      end do
    end function div_zq_2
    function div_zq_02(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = div_zq(a, b(i,j))
        end do
      end do
    end function div_zq_02
    function div_zq_20(a, b) result(c)
      implicit none
      double complex, dimension(:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = div_zq(a(i,j), b)
        end do
      end do
    end function div_zq_20

    function div_zq_3(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_zq(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function div_zq_3
    function div_zq_03(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = div_zq(a, b(i,j,k))
          end do
        end do
      end do
    end function div_zq_03
    function div_zq_30(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = div_zq(a(i,j,k), b)
          end do
        end do
      end do
    end function div_zq_30

    function div_zq_4(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_zq(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_zq_4
    function div_zq_04(a, b) result(c)
      implicit none
      double complex, intent(in) :: a
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = div_zq(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function div_zq_04
    function div_zq_40(a, b) result(c)
      implicit none
      double complex, dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = div_zq(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function div_zq_40
    
  
    function pow_ai_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_ai(a(i), b(i))
      end do
    end function pow_ai_1
    function pow_ai_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = pow_ai(a, b(i))
      end do
    end function pow_ai_01
    function pow_ai_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_ai(a(i), b)
      end do
    end function pow_ai_10

    function pow_ai_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_ai(a(i,j), b(i,j))
        end do
      end do
    end function pow_ai_2
    function pow_ai_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = pow_ai(a, b(i,j))
        end do
      end do
    end function pow_ai_02
    function pow_ai_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_ai(a(i,j), b)
        end do
      end do
    end function pow_ai_20

    function pow_ai_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_ai(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function pow_ai_3
    function pow_ai_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = pow_ai(a, b(i,j,k))
          end do
        end do
      end do
    end function pow_ai_03
    function pow_ai_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_ai(a(i,j,k), b)
          end do
        end do
      end do
    end function pow_ai_30

    function pow_ai_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_ai(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_ai_4
    function pow_ai_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = pow_ai(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_ai_04
    function pow_ai_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_ai(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function pow_ai_40
    
    function pow_ad_1(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_ad(a(i), b(i))
      end do
    end function pow_ad_1
    function pow_ad_01(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_double), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = pow_ad(a, b(i))
      end do
    end function pow_ad_01
    function pow_ad_10(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_ad(a(i), b)
      end do
    end function pow_ad_10

    function pow_ad_2(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_ad(a(i,j), b(i,j))
        end do
      end do
    end function pow_ad_2
    function pow_ad_02(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = pow_ad(a, b(i,j))
        end do
      end do
    end function pow_ad_02
    function pow_ad_20(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_ad(a(i,j), b)
        end do
      end do
    end function pow_ad_20

    function pow_ad_3(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_ad(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function pow_ad_3
    function pow_ad_03(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = pow_ad(a, b(i,j,k))
          end do
        end do
      end do
    end function pow_ad_03
    function pow_ad_30(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_ad(a(i,j,k), b)
          end do
        end do
      end do
    end function pow_ad_30

    function pow_ad_4(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_ad(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_ad_4
    function pow_ad_04(a, b) result(c)
      implicit none
      type(adjac_double), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_double), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = pow_ad(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_ad_04
    function pow_ad_40(a, b) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_ad(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function pow_ad_40
    
    function pow_qi_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_qi(a(i), b(i))
      end do
    end function pow_qi_1
    function pow_qi_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = pow_qi(a, b(i))
      end do
    end function pow_qi_01
    function pow_qi_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_qi(a(i), b)
      end do
    end function pow_qi_10

    function pow_qi_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_qi(a(i,j), b(i,j))
        end do
      end do
    end function pow_qi_2
    function pow_qi_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = pow_qi(a, b(i,j))
        end do
      end do
    end function pow_qi_02
    function pow_qi_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_qi(a(i,j), b)
        end do
      end do
    end function pow_qi_20

    function pow_qi_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_qi(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function pow_qi_3
    function pow_qi_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = pow_qi(a, b(i,j,k))
          end do
        end do
      end do
    end function pow_qi_03
    function pow_qi_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_qi(a(i,j,k), b)
          end do
        end do
      end do
    end function pow_qi_30

    function pow_qi_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_qi(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_qi_4
    function pow_qi_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      integer, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = pow_qi(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_qi_04
    function pow_qi_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      integer, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_qi(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function pow_qi_40
    
    function pow_qd_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_qd(a(i), b(i))
      end do
    end function pow_qd_1
    function pow_qd_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = pow_qd(a, b(i))
      end do
    end function pow_qd_01
    function pow_qd_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_qd(a(i), b)
      end do
    end function pow_qd_10

    function pow_qd_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_qd(a(i,j), b(i,j))
        end do
      end do
    end function pow_qd_2
    function pow_qd_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = pow_qd(a, b(i,j))
        end do
      end do
    end function pow_qd_02
    function pow_qd_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_qd(a(i,j), b)
        end do
      end do
    end function pow_qd_20

    function pow_qd_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_qd(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function pow_qd_3
    function pow_qd_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = pow_qd(a, b(i,j,k))
          end do
        end do
      end do
    end function pow_qd_03
    function pow_qd_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_qd(a(i,j,k), b)
          end do
        end do
      end do
    end function pow_qd_30

    function pow_qd_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_qd(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_qd_4
    function pow_qd_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double precision, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = pow_qd(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_qd_04
    function pow_qd_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double precision, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_qd(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function pow_qd_40
    
    function pow_qz_1(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, dimension(size(a)), intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_qz(a(i), b(i))
      end do
    end function pow_qz_1
    function pow_qz_01(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:), intent(in) :: b
      type(adjac_complexan), dimension(size(b)) :: c
      integer :: i
      do i = 1, size(b)
        c(i) = pow_qz(a, b(i))
      end do
    end function pow_qz_01
    function pow_qz_10(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pow_qz(a(i), b)
      end do
    end function pow_qz_10

    function pow_qz_2(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_qz(a(i,j), b(i,j))
        end do
      end do
    end function pow_qz_2
    function pow_qz_02(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2)) :: c
      integer :: i, j
      do j = 1, size(b,2)
        do i = 1, size(b,1)
          c(i,j) = pow_qz(a, b(i,j))
        end do
      end do
    end function pow_qz_02
    function pow_qz_20(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pow_qz(a(i,j), b)
        end do
      end do
    end function pow_qz_20

    function pow_qz_3(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_qz(a(i,j,k), b(i,j,k))
          end do
        end do
      end do
    end function pow_qz_3
    function pow_qz_03(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3)) :: c
      integer :: i, j, k
      do k = 1, size(b,3)
        do j = 1, size(b,2)
          do i = 1, size(b,1)
            c(i,j,k) = pow_qz(a, b(i,j,k))
          end do
        end do
      end do
    end function pow_qz_03
    function pow_qz_30(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pow_qz(a(i,j,k), b)
          end do
        end do
      end do
    end function pow_qz_30

    function pow_qz_4(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, dimension(size(a,1),size(a,2),size(a,3),size(a,4)), intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_qz(a(i,j,k,l), b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_qz_4
    function pow_qz_04(a, b) result(c)
      implicit none
      type(adjac_complexan), intent(in) :: a
      double complex, dimension(:,:,:,:), intent(in) :: b
      type(adjac_complexan), dimension(size(b,1),size(b,2),size(b,3),size(b,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(b,4)
        do k = 1, size(b,3)
          do j = 1, size(b,2)
            do i = 1, size(b,1)
              c(i,j,k,l) = pow_qz(a, b(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pow_qz_04
    function pow_qz_40(a, b) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      double complex, intent(in) :: b
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pow_qz(a(i,j,k,l), b)
            end do
          end do
        end do
      end do
    end function pow_qz_40
    
  
    function dble_a_1(a) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = dble_a(a(i))
      end do
    end function dble_a_1
    function dble_a_2(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = dble_a(a(i,j))
        end do
      end do
    end function dble_a_2
    function dble_a_3(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = dble_a(a(i,j,k))
          end do
        end do
      end do
    end function dble_a_3
    function dble_a_4(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = dble_a(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function dble_a_4
    
    function dble_b_1(a) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = dble_b(a(i))
      end do
    end function dble_b_1
    function dble_b_2(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = dble_b(a(i,j))
        end do
      end do
    end function dble_b_2
    function dble_b_3(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = dble_b(a(i,j,k))
          end do
        end do
      end do
    end function dble_b_3
    function dble_b_4(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = dble_b(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function dble_b_4
    
  
    function aimag_b_1(a) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = aimag_b(a(i))
      end do
    end function aimag_b_1
    function aimag_b_2(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = aimag_b(a(i,j))
        end do
      end do
    end function aimag_b_2
    function aimag_b_3(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = aimag_b(a(i,j,k))
          end do
        end do
      end do
    end function aimag_b_3
    function aimag_b_4(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = aimag_b(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function aimag_b_4
    
  
    function conjg_b_1(a) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = conjg_b(a(i))
      end do
    end function conjg_b_1
    function conjg_b_2(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = conjg_b(a(i,j))
        end do
      end do
    end function conjg_b_2
    function conjg_b_3(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = conjg_b(a(i,j,k))
          end do
        end do
      end do
    end function conjg_b_3
    function conjg_b_4(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = conjg_b(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function conjg_b_4
    
  
    function neg_a_1(a) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = neg_a(a(i))
      end do
    end function neg_a_1
    function neg_a_2(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = neg_a(a(i,j))
        end do
      end do
    end function neg_a_2
    function neg_a_3(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = neg_a(a(i,j,k))
          end do
        end do
      end do
    end function neg_a_3
    function neg_a_4(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = neg_a(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function neg_a_4
    
    function neg_b_1(a) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = neg_b(a(i))
      end do
    end function neg_b_1
    function neg_b_2(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = neg_b(a(i,j))
        end do
      end do
    end function neg_b_2
    function neg_b_3(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = neg_b(a(i,j,k))
          end do
        end do
      end do
    end function neg_b_3
    function neg_b_4(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = neg_b(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function neg_b_4
    
    function neg_q_1(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = neg_q(a(i))
      end do
    end function neg_q_1
    function neg_q_2(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = neg_q(a(i,j))
        end do
      end do
    end function neg_q_2
    function neg_q_3(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = neg_q(a(i,j,k))
          end do
        end do
      end do
    end function neg_q_3
    function neg_q_4(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = neg_q(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function neg_q_4
    
  
    function pos_a_1(a) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pos_a(a(i))
      end do
    end function pos_a_1
    function pos_a_2(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pos_a(a(i,j))
        end do
      end do
    end function pos_a_2
    function pos_a_3(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pos_a(a(i,j,k))
          end do
        end do
      end do
    end function pos_a_3
    function pos_a_4(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pos_a(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pos_a_4
    
    function pos_b_1(a) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pos_b(a(i))
      end do
    end function pos_b_1
    function pos_b_2(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pos_b(a(i,j))
        end do
      end do
    end function pos_b_2
    function pos_b_3(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pos_b(a(i,j,k))
          end do
        end do
      end do
    end function pos_b_3
    function pos_b_4(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pos_b(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pos_b_4
    
    function pos_q_1(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = pos_q(a(i))
      end do
    end function pos_q_1
    function pos_q_2(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = pos_q(a(i,j))
        end do
      end do
    end function pos_q_2
    function pos_q_3(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = pos_q(a(i,j,k))
          end do
        end do
      end do
    end function pos_q_3
    function pos_q_4(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = pos_q(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function pos_q_4
    
  
    function exp_a_1(a) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = exp_a(a(i))
      end do
    end function exp_a_1
    function exp_a_2(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = exp_a(a(i,j))
        end do
      end do
    end function exp_a_2
    function exp_a_3(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = exp_a(a(i,j,k))
          end do
        end do
      end do
    end function exp_a_3
    function exp_a_4(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = exp_a(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function exp_a_4
    
    function exp_b_1(a) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = exp_b(a(i))
      end do
    end function exp_b_1
    function exp_b_2(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = exp_b(a(i,j))
        end do
      end do
    end function exp_b_2
    function exp_b_3(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = exp_b(a(i,j,k))
          end do
        end do
      end do
    end function exp_b_3
    function exp_b_4(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = exp_b(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function exp_b_4
    
    function exp_q_1(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = exp_q(a(i))
      end do
    end function exp_q_1
    function exp_q_2(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = exp_q(a(i,j))
        end do
      end do
    end function exp_q_2
    function exp_q_3(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = exp_q(a(i,j,k))
          end do
        end do
      end do
    end function exp_q_3
    function exp_q_4(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = exp_q(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function exp_q_4
    
  
    function sin_a_1(a) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sin_a(a(i))
      end do
    end function sin_a_1
    function sin_a_2(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sin_a(a(i,j))
        end do
      end do
    end function sin_a_2
    function sin_a_3(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sin_a(a(i,j,k))
          end do
        end do
      end do
    end function sin_a_3
    function sin_a_4(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sin_a(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sin_a_4
    
    function sin_b_1(a) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sin_b(a(i))
      end do
    end function sin_b_1
    function sin_b_2(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sin_b(a(i,j))
        end do
      end do
    end function sin_b_2
    function sin_b_3(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sin_b(a(i,j,k))
          end do
        end do
      end do
    end function sin_b_3
    function sin_b_4(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sin_b(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sin_b_4
    
    function sin_q_1(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = sin_q(a(i))
      end do
    end function sin_q_1
    function sin_q_2(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = sin_q(a(i,j))
        end do
      end do
    end function sin_q_2
    function sin_q_3(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = sin_q(a(i,j,k))
          end do
        end do
      end do
    end function sin_q_3
    function sin_q_4(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = sin_q(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function sin_q_4
    
  
    function cos_a_1(a) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = cos_a(a(i))
      end do
    end function cos_a_1
    function cos_a_2(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = cos_a(a(i,j))
        end do
      end do
    end function cos_a_2
    function cos_a_3(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = cos_a(a(i,j,k))
          end do
        end do
      end do
    end function cos_a_3
    function cos_a_4(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = cos_a(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function cos_a_4
    
    function cos_b_1(a) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = cos_b(a(i))
      end do
    end function cos_b_1
    function cos_b_2(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = cos_b(a(i,j))
        end do
      end do
    end function cos_b_2
    function cos_b_3(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = cos_b(a(i,j,k))
          end do
        end do
      end do
    end function cos_b_3
    function cos_b_4(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = cos_b(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function cos_b_4
    
    function cos_q_1(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = cos_q(a(i))
      end do
    end function cos_q_1
    function cos_q_2(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = cos_q(a(i,j))
        end do
      end do
    end function cos_q_2
    function cos_q_3(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = cos_q(a(i,j,k))
          end do
        end do
      end do
    end function cos_q_3
    function cos_q_4(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = cos_q(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function cos_q_4
    
  
    function log_a_1(a) result(c)
      implicit none
      type(adjac_double), dimension(:), intent(in) :: a
      type(adjac_double), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = log_a(a(i))
      end do
    end function log_a_1
    function log_a_2(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = log_a(a(i,j))
        end do
      end do
    end function log_a_2
    function log_a_3(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = log_a(a(i,j,k))
          end do
        end do
      end do
    end function log_a_3
    function log_a_4(a) result(c)
      implicit none
      type(adjac_double), dimension(:,:,:,:), intent(in) :: a
      type(adjac_double), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = log_a(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function log_a_4
    
    function log_b_1(a) result(c)
      implicit none
      type(adjac_complex), dimension(:), intent(in) :: a
      type(adjac_complex), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = log_b(a(i))
      end do
    end function log_b_1
    function log_b_2(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = log_b(a(i,j))
        end do
      end do
    end function log_b_2
    function log_b_3(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = log_b(a(i,j,k))
          end do
        end do
      end do
    end function log_b_3
    function log_b_4(a) result(c)
      implicit none
      type(adjac_complex), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complex), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = log_b(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function log_b_4
    
    function log_q_1(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:), intent(in) :: a
      type(adjac_complexan), dimension(size(a)) :: c
      integer :: i
      do i = 1, size(a)
        c(i) = log_q(a(i))
      end do
    end function log_q_1
    function log_q_2(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2)) :: c
      integer :: i, j
      do j = 1, size(a,2)
        do i = 1, size(a,1)
          c(i,j) = log_q(a(i,j))
        end do
      end do
    end function log_q_2
    function log_q_3(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3)) :: c
      integer :: i, j, k
      do k = 1, size(a,3)
        do j = 1, size(a,2)
          do i = 1, size(a,1)
            c(i,j,k) = log_q(a(i,j,k))
          end do
        end do
      end do
    end function log_q_3
    function log_q_4(a) result(c)
      implicit none
      type(adjac_complexan), dimension(:,:,:,:), intent(in) :: a
      type(adjac_complexan), dimension(size(a,1),size(a,2),size(a,3),size(a,4)) :: c
      integer :: i, j, k, l
      do l = 1, size(a,4)
        do k = 1, size(a,3)
          do j = 1, size(a,2)
            do i = 1, size(a,1)
              c(i,j,k,l) = log_q(a(i,j,k,l))
            end do
          end do
        end do
      end do
    end function log_q_4
    

end module adjac
