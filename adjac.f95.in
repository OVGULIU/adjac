! -*-f90-*-
!
! adjac: Automatic Differentiation (forward-mode) for generating sparse Jacobians.
!

! Copyright (c) 2014, Pauli Virtanen <pav@iki.fi>
! All rights reserved.
!
! Redistribution and use in source and binary forms, with or without
! modification, are permitted provided that the following conditions
! are met:
!
! 1. Redistributions of source code must retain the above copyright
! notice, this list of conditions and the following disclaimer.
!
! 2. Redistributions in binary form must reproduce the above copyright
! notice, this list of conditions and the following disclaimer in the
! documentation and/or other materials provided with the distribution.
!
! 3. Neither the name of the copyright holder nor the names of its
! contributors may be used to endorse or promote products derived from
! this software without specific prior written permission.
!
! THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
! "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
! LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
! FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
! COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
! INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
! BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
! LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
! CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
! LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
! ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
! POSSIBILITY OF SUCH DAMAGE.

module adjac
  private

  integer, parameter :: numvars = 100

  type, public :: adjac_double
     ! value + v * D[i]
     double precision :: value
     integer :: i
     double precision :: v
  end type adjac_double

  type, public :: adjac_complexan
     ! value + v * D[i]
     double complex :: value
     integer :: i
     double complex :: v
  end type adjac_complexan

  type, public :: adjac_complex
     type(adjac_double) :: re, im
  end type adjac_complex

  public assignment(=)
  interface assignment(=)
     module procedure assign_ai, assign_ad
     module procedure assign_bi, assign_bd, assign_bz, assign_ba
     module procedure assign_qi, assign_qd, assign_qz
  end interface

  ! Differential binary tree
  !
  ! if (sum_map(1 + 2*(i-1)) .ne. 0) then
  !     D[i] = sum_mul(1+2*(i-1)) * D[sum_map(1+2*(i-1))] + sum_mul(2+2*(i-1)) * D[sum_map(2+2*(i-1))]
  ! else
  !     D[i] = D[i]
  !
  integer :: free_a = 1, free_q = 1
  integer, dimension(:), allocatable :: sum_map_a, sum_map_q
  double precision, dimension(:), allocatable :: sum_mul_a
  double complex, dimension(:), allocatable :: sum_mul_q

{{default pure = ""}}
{{default pure_elemental = ""}}

{{py:
def binops(name):
    chrs = ['i', 'd', 'z']
    ops = ['aa', 'bb', 'qq', 'ab', 'ba']
    for c in chrs:
        ops += ['a'+c, 'b'+c, 'q'+c, c+'a', c+'b', c+'q']
    s = "\n".join("     module procedure " + name + "_" + op for op in ops)
    return s.lstrip()
}}

  public operator(+)
  interface operator(+)
     {{binops("add")}}
  end interface

  public operator(-)
  interface operator(-)
     {{binops("sub")}}
     module procedure neg_a, neg_b, neg_q
  end interface

  public operator(*)
  interface operator(*)
     {{binops("mul")}}
  end interface operator(*)

  public operator(/)
  interface operator(/)
     {{binops("div")}}
  end interface operator(/)

  public operator(**)
  interface operator(**)
     module procedure pow_ai, pow_ad, pow_qi, pow_qd, pow_qz
  end interface operator(**)

  public matmul
  interface matmul
     module procedure matmul_aa, matmul_ai, matmul_ia, matmul_ad, matmul_da
     module procedure matmul_bb, matmul_bz, matmul_zb
     module procedure matmul_qq, matmul_qi, matmul_iq, matmul_qd, matmul_dq, matmul_qz, matmul_zq
  end interface matmul

  public dble
  interface dble
     module procedure dble_a, dble_b
  end interface dble

  public aimag
  interface aimag
     module procedure aimag_b
  end interface aimag

  public conjg
  interface conjg
     module procedure conjg_b
  end interface conjg

  public exp
  interface exp
     module procedure exp_a, exp_b, exp_q
  end interface exp

  public sin
  interface sin
     module procedure sin_a, sin_b, sin_q
  end interface sin

  public cos
  interface cos
     module procedure cos_a, cos_b, cos_q
  end interface cos

  public log
  interface log
     module procedure log_a, log_b, log_q
  end interface log

  interface adjac_set_independent
     module procedure set_independent_a, set_independent_q
     module procedure set_independent_many_a, set_independent_many_q
  end interface adjac_set_independent

  interface sum_taylor
     module procedure sum_taylor_a, sum_taylor_q
  end interface sum_taylor

  interface adjac_get_value
     module procedure get_value_one_a, get_value_one_q
     module procedure get_value_many_a, get_value_many_q
  end interface adjac_get_value

  interface adjac_get_dense_jacobian
     module procedure get_dense_jacobian_a, get_dense_jacobian_q
  end interface adjac_get_dense_jacobian

  interface adjac_get_csr_jacobian
     module procedure get_csr_jacobian_a, get_csr_jacobian_q
  end interface adjac_get_csr_jacobian

  interface adjac_get_coo_jacobian
     module procedure get_coo_jacobian_a, get_coo_jacobian_q
  end interface adjac_get_coo_jacobian

  interface adjac_get_nnz
     module procedure get_nnz_a, get_nnz_q
  end interface adjac_get_nnz

  public adjac_set_independent, adjac_get_value, &
       adjac_get_dense_jacobian, adjac_get_csr_jacobian, &
       adjac_get_coo_jacobian, adjac_get_nnz, &
       adjac_reset

contains

  subroutine adjac_reset()
    implicit none
    free_a = 1
    free_q = 1
    if (allocated(sum_map_a)) then
       deallocate(sum_map_a)
       deallocate(sum_mul_a)
    end if
    if (allocated(sum_map_q)) then
       deallocate(sum_map_q)
       deallocate(sum_mul_q)
    end if
  end subroutine adjac_reset

{{for TYPE, FTYPE, CHR, CAST, FTYPES2 in [('adjac_double', 'double precision', 'a', 'dble', [('integer', 'i'),
                                                                                             ('double precision', 'd')]), 
                                          ('adjac_complexan', 'double complex', 'q', 'dcmplx', [('integer', 'i'),
                                                                                                ('double precision', 'd'), 
                                                                                                ('double complex', 'z')])]}}

  subroutine get_free_variable_idx_{{CHR}}(j)
    implicit none
    integer, intent(out) :: j

    integer, dimension(:), allocatable :: itmp
    {{FTYPE}}, dimension(:), allocatable :: tmp
    integer :: sz

    if (.not.allocated(sum_map_{{CHR}})) then
       sz = 0
    else
       sz = size(sum_map_{{CHR}})
    end if

    if (sz < 2*free_{{CHR}} + 1) then
       ! Enlarge work space
       if (allocated(sum_map_{{CHR}})) then
          sz = sz + 2*free_{{CHR}} + 1
          allocate(itmp(sz), tmp(sz))
          itmp(1:size(sum_map_{{CHR}})) = sum_map_{{CHR}}(:)
          tmp(1:size(sum_mul_{{CHR}})) = sum_mul_{{CHR}}(:)
          call move_alloc(itmp, sum_map_{{CHR}})
          call move_alloc(tmp, sum_mul_{{CHR}})
       else
          allocate(sum_map_{{CHR}}(100), sum_mul_{{CHR}}(100))
       end if
    end if

    j = free_{{CHR}}
    free_{{CHR}} = free_{{CHR}} + 1
  end subroutine get_free_variable_idx_{{CHR}}

  subroutine set_independent_{{CHR}}(x, xval, j)
    implicit none
    type({{TYPE}}), intent(out) :: x
    {{FTYPE}}, intent(in) :: xval
    integer, intent(in) :: j

    x%value = xval
    call get_free_variable_idx_{{CHR}}(x%i)
    x%v = 1

    ! Independent variable
    sum_map_{{CHR}}(1 + 2*(x%i-1)) = 0
    sum_map_{{CHR}}(2 + 2*(x%i-1)) = j
  end subroutine set_independent_{{CHR}}

  subroutine sum_taylor_{{CHR}}(alpha, beta, a, b, c)
    ! dc := alpha*da + beta*db
    implicit none
    {{FTYPE}}, intent(in) :: alpha, beta
    type({{TYPE}}), intent(in) :: a, b
    type({{TYPE}}), intent(inout) :: c

    if (a%v == 0 .or. a%i == 0) then
       c%v = beta * b%v
       c%i = b%i
    else if (b%v == 0 .or. b%i == 0) then
       c%v = alpha * a%v
       c%i = a%i
    else if (a%i == b%i) then
       c%v = alpha * a%v + beta * b%v
       c%i = a%i
    else
       call get_free_variable_idx_{{CHR}}(c%i)
       c%v = 1
       sum_map_{{CHR}}(1 + 2*(c%i-1)) = a%i
       sum_map_{{CHR}}(2 + 2*(c%i-1)) = b%i
       sum_mul_{{CHR}}(1 + 2*(c%i-1)) = alpha * a%v
       sum_mul_{{CHR}}(2 + 2*(c%i-1)) = beta * b%v
    end if
  end subroutine sum_taylor_{{CHR}}

  subroutine set_independent_many_{{CHR}}(x, xval)
    implicit none
    type({{TYPE}}), dimension(:), intent(inout) :: x
    {{FTYPE}}, dimension(size(x)), intent(in) :: xval

    integer :: j

    do j = 1, size(x,1)
       call set_independent_{{CHR}}(x(j), xval(j), j)
    end do
  end subroutine set_independent_many_{{CHR}}

  subroutine get_value_one_{{CHR}}(y, val)
    implicit none
    type({{TYPE}}), intent(in) :: y
    {{FTYPE}}, intent(out) :: val
    val = y%value
  end subroutine get_value_one_{{CHR}}

  subroutine get_value_many_{{CHR}}(y, val)
    implicit none
    type({{TYPE}}), dimension(:), intent(in) :: y
    {{FTYPE}}, dimension(size(y,1)), intent(out) :: val
    integer :: j
    do j = 1, size(val,1)
       val(j) = y(j)%value
    end do
  end subroutine get_value_many_{{CHR}}

{{py:
def walk_tape(ftype, chr, assign, setup=None, accumulate=None):
    if setup is None:
        setup = """
        work(1:(i-1)) = 0
        work(i) = v
        """
    if accumulate is None:
        accumulate = """
        work(ia) = work(ia) + sum_mul_{chr}(1+2*(j-1)) * work(j)
        work(ib) = work(ib) + sum_mul_{chr}(2+2*(j-1)) * work(j)
        """.format(chr=chr)
    return """
    {setup}

    iwork(1:(i-1)) = 0
    iwork(i) = 1

    ! Traverse the tape
    do j = i, 1, -1
       if (iwork(j) .ne. 0) then
          ia = sum_map_{chr}(1+2*(j-1))
          ib = sum_map_{chr}(2+2*(j-1))

          if (ia == 0) then
             {assign}
          else
             {accumulate}
             iwork(ia) = 1
             iwork(ib) = 1
          end if
       end if
    end do
""".format(ftype=ftype, chr=chr, assign=assign, accumulate=accumulate, setup=setup)
}}

  function get_nnz_{{CHR}}(y) result(nnz)
    type({{TYPE}}), dimension(:), intent(in) :: y
    integer :: nnz

    integer, dimension(free_{{CHR}}) :: iwork
    integer :: k, j, ia, ib

    nnz = 0
    do k = 1, size(y,1)
       i = y(k)%i
       {{walk_tape(FTYPE, CHR, 
                   "if (iwork(j) .ne. 0) nnz = nnz + 1", 
                   "", "")}}
    end do
  end function get_nnz_{{CHR}}

  subroutine get_dense_jacobian_{{CHR}}(y, jac_dense)
    implicit none
    type({{TYPE}}), dimension(:), intent(inout) :: y
    {{FTYPE}}, dimension(:,:), intent(out) :: jac_dense

    {{FTYPE}}, dimension(free_{{CHR}}) :: work
    integer, dimension(free_{{CHR}}) :: iwork
    integer :: i, k, j, ia, ib
    {{FTYPE}} :: v

    jac_dense = 0

    do k = 1, size(y,1)
       i = y(k)%i
       v = y(k)%v
    
       {{walk_tape(FTYPE, CHR, "jac_dense(k,ib) = work(j)")}}
    end do
  end subroutine get_dense_jacobian_{{CHR}}

  subroutine get_coo_jacobian_{{CHR}}(y, jac_val, jac_i, jac_j)
    implicit none
    type({{TYPE}}), dimension(:), intent(inout) :: y
    {{FTYPE}}, dimension(:), intent(out) :: jac_val
    integer, dimension(:), intent(out) :: jac_i, jac_j

    {{FTYPE}}, dimension(free_{{CHR}}) :: work
    integer, dimension(free_{{CHR}}) :: iwork
    integer :: i, k, j, ia, ib, pos
    {{FTYPE}} :: v

    pos = 1
    do k = 1, size(y,1)
       i = y(k)%i
       v = y(k)%v

       {{walk_tape(FTYPE, CHR, "jac_i(pos) = k\njac_j(pos) = ib\njac_val(pos) = work(j)\npos = pos + 1")}}
    end do
  end subroutine get_coo_jacobian_{{CHR}}

  subroutine get_csr_jacobian_{{CHR}}(y, jac_val, jac_indices, jac_indptr)
    implicit none
    type({{TYPE}}), dimension(:), intent(inout) :: y
    {{FTYPE}}, dimension(:), intent(out) :: jac_val
    integer, dimension(:), intent(out) :: jac_indices, jac_indptr

    {{FTYPE}}, dimension(free_{{CHR}}) :: work
    integer, dimension(free_{{CHR}}) :: iwork
    integer :: i, k, j, ia, ib, pos
    {{FTYPE}} :: v

    pos = 1
    jac_indptr(1) = 1
    do k = 1, size(y,1)
       i = y(k)%i
       v = y(k)%v

       {{walk_tape(FTYPE, CHR, "jac_indices(pos) = ib\njac_val(pos) = work(j)\npos = pos + 1")}}
       jac_indptr(k+1) = pos
    end do
  end subroutine get_csr_jacobian_{{CHR}}

  !--------------------------------------------------------------------------
  ! Overloaded operators
  !--------------------------------------------------------------------------

  !!
  !! assignment(=)
  !!

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} subroutine assign_{{CHR}}{{CHR2}}(x, y)
    implicit none
    type({{TYPE}}), intent(out) :: x
    {{FTYPE2}}, intent(in) :: y
    x%value = y
    x%i = 0
    x%v = 0
  end subroutine assign_{{CHR}}{{CHR2}}
  {{endfor}}

  {{if TYPE == "adjac_double"}}
  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} subroutine assign_b{{CHR2}}(x, y)
    implicit none
    type(adjac_complex), intent(out) :: x
    {{FTYPE2}}, intent(in) :: y
    x%re = dble(y)
    x%im = 0d0
  end subroutine assign_b{{CHR2}}
  {{endfor}}

  {{pure_elemental}} subroutine assign_bz(x, y)
    implicit none
    type(adjac_complex), intent(out) :: x
    double complex, intent(in) :: y
    x%re = dble(y)
    x%im = aimag(y)
  end subroutine assign_bz

  {{pure_elemental}} subroutine assign_ba(x, y)
    implicit none
    type(adjac_complex), intent(out) :: x
    type({{TYPE}}), intent(in) :: y
    x%re = y
    x%im = 0d0
  end subroutine assign_ba
  {{endif}}

  !!
  !! operator(+)
  !!

  ! X + Y = x + y + (x_j - y_j) dj

  {{pure_elemental}} function add_{{CHR}}{{CHR}}(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x, y
    type({{TYPE}}) :: z

    z%value = x%value + y%value
    call sum_taylor({{CAST}}(1d0), {{CAST}}(1d0), x, y, z)
  end function add_{{CHR}}{{CHR}}

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} function add_{{CHR}}{{CHR2}}(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    {{FTYPE2}}, intent(in) :: y
    type({{TYPE}}) :: z
    z%value = x%value + y
    z%i = x%i
    z%v = x%v
  end function add_{{CHR}}{{CHR2}}

  {{pure_elemental}} function add_{{CHR2}}{{CHR}}(x, y) result(z)
    implicit none
    {{FTYPE2}}, intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type({{TYPE}}) :: z
    z = y + x
  end function add_{{CHR2}}{{CHR}}
  {{endfor}}

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function add_az(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x + dble(y)
    z%im = aimag(y)
  end function add_az

  {{pure_elemental}} function add_za(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) + y
    z%im = aimag(x)
  end function add_za

  {{pure_elemental}} function add_bb(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re + y%re
    z%im = x%im + y%im
  end function add_bb

  {{pure_elemental}} function add_bz(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re + dble(y)
    z%im = x%im + aimag(y)
  end function add_bz

  {{pure_elemental}} function add_zb(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) + y%re
    z%im = aimag(x) + y%im
  end function add_zb

  {{pure_elemental}} function add_ba(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re + y
    z%im = x%im
  end function add_ba

  {{pure_elemental}} function add_ab(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x + y%re
    z%im = y%im
  end function add_ab

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} function add_b{{CHR2}}(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    {{FTYPE2}}, intent(in) :: y
    type(adjac_complex) :: z
    z = x + dcmplx(y)
  end function add_b{{CHR2}}

  {{pure_elemental}} function add_{{CHR2}}b(x, y) result(z)
    implicit none
    {{FTYPE2}}, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) + y
  end function add_{{CHR2}}b
  {{endfor}}

  {{endif}}

  !!
  !! operator(-)
  !!

  ! X - Y = x - y + (x_j - y_j) dj

  {{pure_elemental}} function sub_{{CHR}}{{CHR}}(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x, y
    type({{TYPE}}) :: z
    z%value = x%value - y%value
    call sum_taylor({{CAST}}(1d0), {{CAST}}(-1d0), x, y, z)
  end function sub_{{CHR}}{{CHR}}

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} function sub_{{CHR}}{{CHR2}}(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    {{FTYPE2}}, intent(in) :: y
    type({{TYPE}}) :: z
    z%value = x%value - y
    z%v = x%v
    z%i = x%i
  end function sub_{{CHR}}{{CHR2}}

  {{pure_elemental}} function sub_{{CHR2}}{{CHR}}(x, y) result(z)
    implicit none
    {{FTYPE2}}, intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type({{TYPE}}) :: z
    z%value = x - y%value
    z%i = y%i
    z%v = -y%v
  end function sub_{{CHR2}}{{CHR}}
  {{endfor}}

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function sub_az(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x - dble(y)
    z%im = -aimag(y)
  end function sub_az

  {{pure_elemental}} function sub_za(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) - y
    z%im = aimag(x)
  end function sub_za

  {{pure_elemental}} function sub_bb(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re - y%re
    z%im = x%im - y%im
  end function sub_bb

  {{pure_elemental}} function sub_bz(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re - dble(y)
    z%im = x%im - aimag(y)
  end function sub_bz

  {{pure_elemental}} function sub_zb(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) - y%re
    z%im = aimag(x) - y%im
  end function sub_zb

  {{pure_elemental}} function sub_ba(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re - y
    z%im = x%im
  end function sub_ba

  {{pure_elemental}} function sub_ab(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x - y%re
    z%im = -y%im
  end function sub_ab

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} function sub_b{{CHR2}}(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    {{FTYPE2}}, intent(in) :: y
    type(adjac_complex) :: z
    z = x - dcmplx(y)
  end function sub_b{{CHR2}}

  {{pure_elemental}} function sub_{{CHR2}}b(x, y) result(z)
    implicit none
    {{FTYPE2}}, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) - y
  end function sub_{{CHR2}}b
  {{endfor}}
  {{endif}}

  !!
  !! operator(-), unary
  !!

  {{pure_elemental}} function neg_{{CHR}}(x) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    type({{TYPE}}) :: z
    z = 0d0 - x
  end function neg_{{CHR}}

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function neg_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    z = (0d0,0d0) - z
  end function neg_b
  {{endif}}

  !!
  !! operator(*)
  !!

  ! X*Y = x*y + (x y_j + y x_j) dj

  {{pure_elemental}} function mul_{{CHR}}{{CHR}}(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x, y
    type({{TYPE}}) :: z

    z%value = x%value * y%value
    call sum_taylor(y%value, x%value, x, y, z)
  end function mul_{{CHR}}{{CHR}}

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} function mul_{{CHR}}{{CHR2}}(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    {{FTYPE2}}, intent(in) :: y
    type({{TYPE}}) :: z
    z%value = x%value * y
    z%i = x%i
    z%v = x%v * y
  end function mul_{{CHR}}{{CHR2}}

  {{pure_elemental}} function mul_{{CHR2}}{{CHR}}(x, y) result(z)
    implicit none
    {{FTYPE2}}, intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type({{TYPE}}) :: z
    z = y * x
  end function mul_{{CHR2}}{{CHR}}
  {{endfor}}

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function mul_az(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x * dble(y)
    z%im = x * aimag(y)
  end function mul_az

  {{pure_elemental}} function mul_za(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) * y
    z%im = aimag(x) * y
  end function mul_za

  {{pure_elemental}} function mul_bb(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re * y%re - x%im * y%im
    z%im = x%re * y%im + x%im * y%re
  end function mul_bb

  {{pure_elemental}} function mul_bz(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re * dble(y) - x%im * aimag(y)
    z%im = x%re * aimag(y) + x%im * dble(y)
  end function mul_bz

  {{pure_elemental}} function mul_zb(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) * y%re - aimag(x) * y%im
    z%im = dble(x) * y%im + aimag(x) * y%re
  end function mul_zb

  {{pure_elemental}} function mul_ba(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re * y
    z%im = x%im * y
  end function mul_ba

  {{pure_elemental}} function mul_ab(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x * y%re
    z%im = x * y%im
  end function mul_ab

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} function mul_b{{CHR2}}(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    {{FTYPE2}}, intent(in) :: y
    type(adjac_complex) :: z
    z = x * dcmplx(y)
  end function mul_b{{CHR2}}

  {{pure_elemental}} function mul_{{CHR2}}b(x, y) result(z)
    implicit none
    {{FTYPE2}}, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) * y
  end function mul_{{CHR2}}b
  {{endfor}}
  {{endif}}

  !!
  !! operator(/)
  !!

  ! X/Y = x/y + (x_j/y - x y_j/y**2) dj

  {{pure_elemental}} function div_{{CHR}}{{CHR}}(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x, y
    type({{TYPE}}) :: z
    z%value = x%value / y%value
    call sum_taylor(1d0/y%value, -x%value/(y%value**2), x, y, z)
  end function div_{{CHR}}{{CHR}}

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} function div_{{CHR}}{{CHR2}}(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    {{FTYPE2}}, intent(in) :: y
    type({{TYPE}}) :: z
    z = (1d0 / y) * x
  end function div_{{CHR}}{{CHR2}}

  {{pure_elemental}} function div_{{CHR2}}{{CHR}}(x, y) result(z)
    implicit none
    {{FTYPE2}}, intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type({{TYPE}}) :: z
    z = (-x / (y%value**2)) * y
    z%value = x / y%value
  end function div_{{CHR2}}{{CHR}}
  {{endfor}}

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function div_az(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_az

  {{pure_elemental}} function div_za(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type(adjac_complex) :: z
    z%re = dble(x) / y
    z%im = aimag(x) / y
  end function div_za

  {{pure_elemental}} function div_bb(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_bb

  {{pure_elemental}} function div_bz(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    double complex, intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_bz

  {{pure_elemental}} function div_zb(x, y) result(z)
    implicit none
    double complex, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_zb

  {{pure_elemental}} function div_ba(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type({{TYPE}}), intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re / y
    z%im = x%im / y
  end function div_ba

  {{pure_elemental}} function div_ab(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = x * conjg(y) / (dble(y)*dble(y) + aimag(y)*aimag(y))
  end function div_ab

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} function div_b{{CHR2}}(x, y) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    {{FTYPE2}}, intent(in) :: y
    type(adjac_complex) :: z
    z%re = x%re / y
    z%im = x%im / y
  end function div_b{{CHR2}}

  {{pure_elemental}} function div_{{CHR2}}b(x, y) result(z)
    implicit none
    {{FTYPE2}}, intent(in) :: x
    type(adjac_complex), intent(in) :: y
    type(adjac_complex) :: z
    z = dcmplx(x) / y
  end function div_{{CHR2}}b
  {{endfor}}
  {{endif}}

  !!
  !! operator(**)
  !!

  {{for FTYPE2, CHR2 in FTYPES2}}
  {{pure_elemental}} function pow_{{CHR}}{{CHR2}}(x, y) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    {{FTYPE2}}, intent(in) :: y
    type({{TYPE}}) :: z
    z = exp(y * log(x))
  end function pow_{{CHR}}{{CHR2}}
  {{endfor}}

  !!
  !! matmul
  !!

{{def matmulcode}}
    integer i, j, k

    if (size(x,2) .ne. size(y,1)) then
       write(*,*) 'invalid array sizes in matmul'
       stop
    end if

    do j = 1, size(y,2)
       do i = 1, size(x,1)
          z(i,j) = x(i,1)*y(1,j)
          do k = 2, size(x,2)
             z(i,j) = z(i,j) + x(i,k)*y(k,j)
          end do
       end do
    end do
{{enddef}}

  function matmul_{{CHR}}{{CHR}}(x, y) result(z)
    implicit none
    type({{TYPE}}), dimension(:,:), intent(in) :: x, y
    type({{TYPE}}), dimension(size(x,1),size(y,2)) :: z
    {{matmulcode}}
  end function matmul_{{CHR}}{{CHR}}

  {{for FTYPE2, CHR2 in FTYPES2}}
  function matmul_{{CHR}}{{CHR2}}(x, y) result(z)
    implicit none
    type({{TYPE}}), dimension(:,:), intent(in) :: x
    {{FTYPE2}}, dimension(:,:), intent(in) :: y
    type({{TYPE}}), dimension(size(x,1),size(y,2)) :: z
    {{matmulcode}}
  end function matmul_{{CHR}}{{CHR2}}

  function matmul_{{CHR2}}{{CHR}}(x, y) result(z)
    implicit none
    {{FTYPE2}}, dimension(:,:), intent(in) :: x
    type({{TYPE}}), dimension(:,:), intent(in) :: y
    type({{TYPE}}), dimension(size(x,1),size(y,2)) :: z
    {{matmulcode}}
  end function matmul_{{CHR2}}{{CHR}}
  {{endfor}}

  {{if TYPE == "adjac_double"}}
  function matmul_bb(x, y) result(z)
    implicit none
    type(adjac_complex), dimension(:,:), intent(in) :: x, y
    type(adjac_complex), dimension(size(x,1),size(y,2)) :: z
    {{matmulcode}}
  end function matmul_bb

  function matmul_bz(x, y) result(z)
    implicit none
    type(adjac_complex), dimension(:,:), intent(in) :: x
    double complex, dimension(:,:), intent(in) :: y
    type(adjac_complex), dimension(size(x,1),size(y,2)) :: z
    {{matmulcode}}
  end function matmul_bz

  function matmul_zb(x, y) result(z)
    implicit none
    double complex, dimension(:,:), intent(in) :: x
    type(adjac_complex), dimension(:,:), intent(in) :: y
    type(adjac_complex), dimension(size(x,1),size(y,2)) :: z
    {{matmulcode}}
  end function matmul_zb
  {{endif}}

  !!
  !! dble
  !!

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function dble_a(x) result(z)
    implicit none
    type(adjac_double), intent(in) :: x
    type(adjac_double) :: z
    z = x
  end function dble_a

  {{pure_elemental}} function dble_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_double) :: z
    z = x%re
  end function dble_b
  {{endif}}

  !!
  !! aimag
  !!

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function aimag_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_double) :: z
    z = x%im
  end function aimag_b
  {{endif}}

  !!
  !! conjg
  !!

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function conjg_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    z%re = x%re
    z%im = -x%im
  end function conjg_b
  {{endif}}

  !!
  !! exp
  !!

  {{pure_elemental}} function exp_{{CHR}}(x) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    type({{TYPE}}) :: z
    {{FTYPE}} :: v, dv
    v = exp(x%value)
    dv = v
    z = dv*x
    z%value = v
  end function exp_{{CHR}}

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function exp_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    double complex :: v, dv
    v = exp(dcmplx(x%re%value, x%im%value))
    dv = v
    z = dv*x
    z%re%value = dble(v)
    z%im%value = aimag(v)
  end function exp_b
  {{endif}}

  !!
  !! sin
  !!

  {{pure_elemental}} function sin_{{CHR}}(x) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    type({{TYPE}}) :: z
    {{FTYPE}} :: v, dv
    v = sin(x%value)
    dv = cos(x%value)
    z = dv*x
    z%value = v
  end function sin_{{CHR}}

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function sin_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    double complex :: v, dv
    v = sin(dcmplx(x%re%value, x%im%value))
    dv = cos(dcmplx(x%re%value, x%im%value))
    z = dv*x
    z%re%value = dble(v)
    z%im%value = aimag(v)
  end function sin_b
  {{endif}}

  !!
  !! cos
  !!

  {{pure_elemental}} function cos_{{CHR}}(x) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    type({{TYPE}}) :: z
    {{FTYPE}} :: v, dv
    v = cos(x%value)
    dv = -sin(x%value)
    z = dv*x
    z%value = v
  end function cos_{{CHR}}

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function cos_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    double complex :: v, dv
    v = cos(dcmplx(x%re%value, x%im%value))
    dv = -sin(dcmplx(x%re%value, x%im%value))
    z = dv*x
    z%re%value = dble(v)
    z%im%value = aimag(v)
  end function cos_b
  {{endif}}

  !!
  !! log
  !!

  {{pure_elemental}} function log_{{CHR}}(x) result(z)
    implicit none
    type({{TYPE}}), intent(in) :: x
    type({{TYPE}}) :: z
    {{FTYPE}} :: v, dv
    v = log(x%value)
    dv = 1d0/x%value
    z = dv*x
    z%value = v
  end function log_{{CHR}}

  {{if TYPE == "adjac_double"}}
  {{pure_elemental}} function log_b(x) result(z)
    implicit none
    type(adjac_complex), intent(in) :: x
    type(adjac_complex) :: z
    double complex :: v, dv
    v = log(dcmplx(x%re%value, x%im%value))
    dv = 1d0/dcmplx(x%re%value, x%im%value)
    z = dv*x
    z%re%value = dble(v)
    z%im%value = aimag(v)
  end function log_b
  {{endif}}

{{endfor}}
end module adjac
